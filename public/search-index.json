[
  {
    "title": "Auth.jsとRuby on Railsによるユーザ管理",
    "summary": "だれも解説してくれないのでメモ",
    "tags": [
      "Next.js",
      "Ruby on Rails",
      "認証",
      "Auth.js"
    ],
    "slug": "ruby/auth-js-ror-user-management",
    "folder": "ruby",
    "content": "\n前回の続きです．\n[Auth.jsの基礎 (Google OAuthを使用)](https://techblog-notes.vercel.app/afdc23b5-ec55-4c5e-8763-6bc649124448)\n\n# JWT認証の導入\n\n---\n\n今回，Auth.jsにより取得したログイン情報をバックエンドに渡しユーザ管理する手法として以下のプロセスを要します．\n\n1. Googleの認証が成功するとAuth.jsがaccount.id_tokenを受け取る．このID トークンはGoogleが発行するJWTである．\n1. account.id_tokenはjwtコールバックで token.idTokenに保存する．\n1. セッションにIDトークンを保存する．\n1. セッションからIDトークンを取得し，`fetch()`を用いてバックエンドに送信．\n1. バックエンドでIDトークンを検証，成功後に初めてデータを処理できる．\n\nこのように，結構面倒な処理をする必要があります．(コード自体はそこまで書かない気がする)\n\n## 型定義ファイルを編集する\n\nAuth.jsでは，account.id_tokenは定義されているものの，tokenとsessionにid_tokenは定義されていません．しかしそれでもid_tokenを渡したいので，定義します．\n\n```ts\n// types/next-auth.d.ts\nimport \"next-auth/jwt\";\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    idToken?: string;\n  }\n}\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      idToken?: string;\n    } & DefaultSession[\"user\"];\n  }\n}\n```\n\n> `session.idToken`でいいかなと思っていたけど，V5では`session.user.idToken`にすることが推奨されていたのでこのようにしてます．\n\n## コールバック関数を用意する\n\n```ts\nimport NextAuth from \"next-auth\";\nimport Google from \"next-auth/providers/google\";\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [Google],\n  callbacks: {\n    async jwt({ token, account }) {\n      if (account) {\n        token.idToken = account.id_token;\n      }\n\n      return token;\n    },\n    async session({ session, token }) {\n      session.user.idToken = token.idToken;\n\n      return session;\n    },\n  },\n});\n```\n\nこうすることで，`auth()`から`user.idToken`を取得することができるようになります．\n\n## バックエンドにIDトークンを渡す\n\nトークン情報はbodyではなくheaderに含めるのが一般的です．`http://localhost:3001/auth/google`に渡すように設定します．\n\n```tsx\nimport { auth } from \"@/auth\";\nimport { redirect } from \"next/navigation\";\nimport React from \"react\";\n\nexport default async function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const session = await auth();\n\n  if (session) {\n    const idToken = session.user.idToken;\n\n    if (idToken) {\n      await fetch(\"http://localhost:3001/auth/google\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${idToken}`,\n        },\n      });\n    }\n  } else {\n    redirect(\"/signin\");\n  }\n\n  return <>{children}</>;\n}\n```\n\n# バックエンド処理\n\n---\n\n## プロジェクト作成\n\n```bash\nrails new backend --api -T\n```\n\n### gemのインストール\n\n今回使うgemは以下の通りです．\n\n```ruby\ngem 'rack-cors', require: 'rack/cors'\ngem \"google-id-token\"\ngem 'dotenv-rails'\n```\n\n`bundle install`を忘れずに実行しましょう\n\n### corsの設定\n\n`http://localhost:3000`を許可しましょう\n\n```ruby\n# config/initializers/cors.rb\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins \"http://localhost:3000\"\n\n    resource \"*\",\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head]\n  end\nend\n```\n\n### ポートの修正\n\n3000番は既にフロント側で使用されているので，バックエンド側は3001番に設定します．\n\n```ruby\n# config/puma.rb\nport ENV.fetch(\"PORT\", 3001)\n```\n\n## モデルの作成\n\n`google_sub`はユーザーごとに一意なIDを示しており，IDトークンの検証時に取得できます(フロントエンドでも取得できる)．\n\n```bash\nrails generate model User google_sub:string name:string email:string picture:string\n```\n\n`rails db:migrate`を忘れずに実行しましょう\n\n### バリデーションを定義する\n\n作成した`User`モデルの`google_sub`と`email`について，それぞれ必須かつユニークな値にバリデートします．\n\n```ruby\nclass User < ApplicationRecord\n  validates :google_sub, presence: true, uniqueness: true\n  validates :email, presence: true, uniqueness: true\nend\n```\n\n## コントローラの作成\n\n```bash\nrails generate controller sessions\n```\n\n実行すると，`sessions_controller.rb`が生成されるので，そのファイルを編集していきます．\n\n```ruby\nclass SessionsController < ApplicationController\n  # ライブラリの読み込み\n  require \"google-id-token\"\n\n  def google_auth\n    auth_header = request.headers[\"Authorization\"]\n\n    # トークンが存在しない場合、または形式が不正な場合，unauthorizedエラーを返す\n    unless auth_header&.start_with?(\"Bearer \")\n      return render json: { error: \"Unauthorized\" }, status: :unauthorized\n    end\n\n    # AuthorizationヘッダーからIDトークンを取り出す\n    token = auth_header.split(\"Bearer \").last\n\n    # トークン検証\n    begin\n      # IDトークンを検証するためのバリデータを作成\n      validator = GoogleIDToken::Validator.new\n      payload = validator.check(token, ENV[\"GOOGLE_CLIENT_ID\"])\n\n      sub = payload[\"sub\"]\n      email = payload[\"email\"]\n      name = payload[\"name\"]\n      picture = payload[\"picture\"]\n\n      # ユーザが見つかれば更新，見つからなければ作成\n      user = User.find_or_create_by(google_sub: sub) do |u|\n        u.name = name\n        u.email = email\n        u.picture = picture\n      end\n\n      render json: { message: \"Login successful\", user: user }\n    rescue StandardError => e\n      Rails.logger.error \"Google Auth Error: #{e.message}\"\n\n      render json: { error: \"Invalid ID token\" }, status: :unauthorized\n    end\n  end\nend\n```\n\n### ルーティングの設定\n\n`auth/google`にアクセスしたときに`SessionsController`クラスの`google_auth`メソッドが実行されるようにルーティングします．\n\n```ruby\nRails.application.routes.draw do\n  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html\n\n  # Reveal health status on /up that returns 200 if the app boots with no exceptions, otherwise 500.\n  # Can be used by load balancers and uptime monitors to verify that the app is live.\n  get \"up\" => \"rails/health#show\", as: :rails_health_check\n\n  # Defines the root path route (\"/\")\n  # root \"posts#index\"\n\n  post \"auth/google\", to: \"sessions#google_auth\"\nend\n```\n\n# テスト\n\n実際に`http://localhost:3000`にアクセスし，アカウント作成，ログイン，ログアウトを検証してみましょう．想定通りの挙動がされれば成功です．\n",
    "createdAt": "2025-07-11T15:12:53.696Z",
    "updatedAt": "2025-07-12T04:28:40.937Z"
  },
  {
    "title": "Auth.jsの基礎 (Google OAuthを使用)",
    "summary": "最新のAuth.jsの使い方をメモ",
    "tags": [
      "Next.js",
      "認証",
      "Auth.js"
    ],
    "slug": "Next.js/auth-js-tutorial",
    "folder": "Next.js",
    "content": "\n# バージョン\n\n---\n\n```json\n\"next\": \"15.1.7\",\n\"next-auth\": \"^5.0.0-beta.25\",\n\"react\": \"^19.0.0\",\n\"react-dom\": \"^19.0.0\"\n```\n\n# プロジェクト作成\n\n---\n\nApp routerを使っていきます．\n\n```bash\n$ npx create-next-app@latest\n✔ What is your project named? … frontend\n✔ Would you like to use TypeScript? … Yes\n✔ Would you like to use ESLint? … Yes\n✔ Would you like to use Tailwind CSS? … Yes\n✔ Would you like your code inside a `src/` directory? … No\n✔ Would you like to use App Router? (recommended) … Yes\n✔ Would you like to use Turbopack for `next dev`? … Yes\n✔ Would you like to customize the import alias (`@/*` by default)? … No\n```\n\n## Auth.jsの設定\n\n公式サイトのやり方に則ります．\n[Auth.js | Installation](https://authjs.dev/getting-started/installation?framework=next-js)\n\n### パッケージのインストール\n\n```bash\nnpm install next-auth@beta\n```\n\n### シークレットキーの作成\n\nライブラリがトークンやメール認証用のハッシュを暗号化するために使用するランダムな値を生成し，自動で`.env`あるいは`.env.local`に保存されます．\n\n```bash\n$ npx auth secret\n📝 Created [プロジェクトの場所].env.local with `AUTH_SECRET`.\n```\n\n# アプリの下準備\n\n---\n\n## `Auth.ts`の作成\n\nここでは使用したい認証プロバイダの指定やコールバックの設定などができます．ここでは単純にgoogleのプロバイダのみを使用します．\n\n```ts\n// ./auth.ts\nimport NextAuth from \"next-auth\";\nimport Google from \"next-auth/providers/google\";\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [Google],\n});\n```\n\n## `routes.ts`の作成\n\n今後セッション管理用の関数を使うために，あらかじめルーティングを設定する必要があります．\n\n```ts\n// ./app/api/auth/[...nextauth]/route.ts\nimport { handlers } from \"@/auth\"; // Referring to the auth.ts we just created\nexport const { GET, POST } = handlers;\n```\n\nこれを設定すると以下のエンドポイントが自動で作成されます\n\n- `/api/auth/signin`（サインイン）\n- `/api/auth/signout`（サインアウト）\n- `/api/auth/session`（セッション情報取得）\n- `/api/auth/callback/:provider`（OAuth コールバック）\n- `/api/auth/csrf`（CSRF トークン取得）\n\nこれらが作成されることにより適切にAuth.jsが用意した関数を使用することができるようになります．\n\n## GoogleのOAuthを使う\n\nGoogle Cloudからプロジェクトを作成し，クライアントIDとシークレットキーを取得する必要があります\nhttps://console.cloud.google.com/\n\n### 認証情報の作成\n\n`ナビゲーションメニュー > APIとサービス > 認証情報`に移動し，`認証情報を作成`します．種類は OAuth クライアント ID を選択してください．\n\n### クライアントIDの設定\n\nOAuth クライアント ID の作成は以下のように設定してください．\n\n- アプリケーションの種類 ... ウェブアプリケーション\n- 名前 ... 任意の名前\n- 承認済みの JavaScript 生成元 ... http://localhost:3000\n- 承認済みのリダイレクト URI ... http://localhost:3000/api/auth/callback/google\n\n> 同意画面を作成していない場合は，事前に作成することを促されます．また作成後，サイトを再読み込みする必要があります．\n\n### `.env.local`の編集\n\nOAuth クライアント IDの作成がうまくいくと，クライアント ID とクライアントシークレットを取得できます．これらを`.env.local`に追加しておきます．\n\n```env\nAUTH_GOOGLE_ID={CLIENT_ID}\nAUTH_GOOGLE_SECRET={CLIENT_SECRET}\n```\n\n# 実装\n\n---\n\n## signin/signoutコンポーネントの作成\n\n### `components/signin.tsx`\n\n今回は，サインインしたのちに`/dashboard`にリダイレクトするようにします．\n\n```tsx\nimport { signIn } from \"@/auth\";\n\nexport default function SignIn() {\n  return (\n    <form\n      action={async () => {\n        \"use server\";\n        await signIn(\"google\", { redirectTo: \"/dashboard\" });\n      }}\n    >\n      <button\n        type=\"submit\"\n        className=\"w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600\"\n      >\n        Sign in with Google\n      </button>\n    </form>\n  );\n}\n```\n\n### `components/signout.tsx`\n\n```tsx\nimport { signOut } from \"@/auth\";\n\nexport function SignOut() {\n  return (\n    <form\n      action={async () => {\n        \"use server\";\n        await signOut({ redirectTo: \"/\" });\n      }}\n    >\n      <button\n        type=\"submit\"\n        className=\"w-full bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600\"\n      >\n        Sign Out\n      </button>\n    </form>\n  );\n}\n```\n\n## ログイン専用ページの設定\n\n`/dashboard`以下の階層ではログインしないと入れないような仕組みにします．`auth()`からセッション情報を取得し，その内容で`signin`ページにリダイレクトするか，そのままdashboardページを開くか分岐させます．そのために`/dashboard/layout.tsx`を以下のように編集します．\n\n```tsx\nimport { auth } from \"@/auth\";\nimport { redirect } from \"next/navigation\";\nimport React from \"react\";\n\nexport default async function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const session = await auth();\n\n  if (!session) {\n    redirect(\"/signin\");\n  }\n\n  return <>{children}</>;\n}\n```\n\n## ページコンポーネントでの使用\n\n### `app/signin/page.tsx`\n\n```tsx\nimport SignIn from \"@/components/signin\";\n\nexport default function SignInPage() {\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\n      <div className=\"bg-white p-8 rounded shadow-md w-full max-w-md\">\n        <h1 className=\"text-2xl font-bold mb-6 text-center\">Sign In</h1>\n        <SignIn />\n      </div>\n    </div>\n  );\n}\n```\n\n### `app/dashboard/page.tsx`\n\n```tsx\nimport { SignOut } from \"@/components/sign-out\";\n\nexport default function DashboardPage() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\n      <div className=\"bg-white p-8 rounded shadow-md w-full max-w-2xl\">\n        <h1 className=\"text-3xl font-bold mb-6 text-center\">Dashboard</h1>\n        <p className=\"mb-4 text-center\">Welcome to your dashboard!</p>\n        <div className=\"flex justify-center\">\n          <SignOut />\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n# テスト\n\n---\n\n- http://localhost:3000\n- http://localhost:3000/signin\n- http://localhost:3000/dashboard\n\nこれらのページを開いて，それぞれの挙動を確認しましょう．\n\n次回は，バックエンドとの統合について解説していきます．\n[Auth.jsとRuby on Railsによるユーザ管理](https://techblog-notes.vercel.app/174f1269-0c19-419b-a9f5-09a691e2f342)\n",
    "createdAt": "2025-07-11T13:23:19.958Z",
    "updatedAt": "2025-07-11T13:23:19.958Z"
  },
  {
    "title": "Consideration of a Generative Method Using a Gaussian Mixture Model",
    "summary": "We constructed a basic generative model using a Gaussian Mixture Model (GMM).",
    "tags": [
      "python",
      "Machine Learning",
      "Data Science",
      "Mathematical Optimization"
    ],
    "slug": "Generative-AI/GMM-gen-ai",
    "folder": "Generative-AI",
    "content": "\n# Gaussian Mixture Model (GMM)\n\n- A clustering method.\n- Can also be used as a generative model.\n- Represents a given dataset as a combination of multiple Gaussian distributions.\n- Provides a probability density function, which explains its use as a generative model.\n- Can automatically determine the number of clusters.\n- Reveals the prior distribution of explanatory variable X (latent variable).\n\n## Gaussian Distribution (can be visualized as a graph in a two-dimensional space of x and y)\n\n$$\nN(x|\\mu,\\sigma^2)=\\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\left\\{-\\frac{1}{2\\sigma^2}(x-\\mu)^2\\right\\}\n$$\n\n## Multivariate Normal Distribution (Can be viewed as a graph in three or more dimensions such as x, y, z...)\n\n$$\nN(\\mathbf x|\\mathbf\\mu,\\Sigma)=\\frac{1}{(2\\pi)^\\frac{m}{2}}\\frac{1}{|\\Sigma|^{\\frac{1}{2}}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf x-\\mathbf\\mu)^T\\Sigma^{-1}(\\mathbf x-\\mathbf\\mu)\\right\\}\\quad\\left(\\mathbf x:\nRandom~variable~vector,\\mathbf\\mu:Average~vector,\\Sigma:Covariance~matrix\\right)\n$$\n\n## Mixture of Gaussian Distribution (Multiple peaks are formed)\n\n$$\np(\\mathbf x)=\\sum_{k=1}^n\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)\\quad\\left(n:n ~Gaussian~distributions,k:k-th~Gaussian~distribution,\\pi_k:Mixture~coefficient\\left(Weight~of~each~Gaussian~distribution,\\sum_{k=1}^n\\pi_k=1\\right)\\right)\n$$\n\nReference: https://datachemeng.com/wp-content/uploads/gaussianmixturemodel.pdf\n\n# Prior distribution of Mixture Gaussian Distribution\n\nThe prior distribution here is the distribution of \"which cluster a variable belongs to after receiving it.\" If we define the latent variable as $\\mathbf z$, then $\\mathbf z$ is\n\n- A vector (i.e., a matrix) with a one-hot vector that is 1 in one cluster and 0 in the others.\n- If there is no information about the sample, the probability that $\\mathbf z_k=1$ is set to follow the mixture coefficient.\n  $$\n  p(\\mathbf z_k=1)=\\pi_k\n  $$\n\nIf this is not introduced, the area will not be 1 in the mixture Gaussian distribution (it is obvious that the sum of probabilities will exceed 1 if simply added).\n\n## Finding the prior distribution\n\nUsing Bayes' theorem, the probability that a sample $\\mathbf x$ will be $z_k=1$ given is\n\n$$\np(z_k=1|\\mathbf x)=\\frac{p(z_k=1)p(\\mathbf x|z_k=1)}{\\sum_{i=1}^np(z_k=1)p(\\mathbf x|z_i=1)}=\\frac{\\pi_kp(\\mathbf x|z_k=1)}{\\sum_{i=1}^n\\pi_ip(\\mathbf x|z_i=1)}=\\frac{\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)}{\\sum_{i=1}^n\\pi_iN(\\mathbf x|\\mu_i,\\Sigma_i)}\n$$\n\nFrom this,\n\n$$\nk^\\star=\\arg\\max_kp(z_k=1|\\mathbf x)\n$$\n\nBy doing so, the cluster at a certain point $\\mathbf x$ can be estimated.\n\n# Creating a Mixture Gaussian Distribution\n\n## Definition of probability density function\n\n```py\n# Multivariate normal distribution\ndef gaussian_densty(x, mu, sigma): # (1, n), (1, n), (n, n)\n  diff = x - mu\n  sigma_inv = np.linalg.inv(sigma)\n  sigma_det = np.linalg.det(sigma)\n  z = np.exp(-np.dot(diff.T, np.dot(sigma_inv, diff)) / 2)\n\n  return z / np.sqrt(np.power(2*np.pi, len(mu)) * sigma_det) # (1, n)\n\n# Mixture Gaussian distribution\ndef mixture_gaussian_densty(x, mu_list, sigma_list, pi_list): # (1, n), (k, n), (k, n, n), (1, k)\n  z = 0\n  for i in range(len(pi_list)):\n    z += pi_list[i] * gaussian_densty(x, mu_list[i], sigma_list[i])\n  return z # (1, n)\n```\n\n> Note that only the probability density function has been created, so the corresponding code is required to sample it.\n\n## Using NumPy's Official Multivariate Normal Distribution\n\n```py\n# Generate samples from a multivariate normal distribution\ndef sample_multivariate_gaussian(mu, sigma, num_samples=1):\n    return np.random.multivariate_normal(mu, sigma, num_samples)\n\n# Generate samples from a mixture Gaussian distribution\ndef sample_mixture_gaussian(mu_list, sigma_list, pi_list, num_samples=100):\n    samples = []\n    num_clusters = len(pi_list)\n\n    # Determine the number of samples in each cluster\n    cluster_sizes = np.random.multinomial(num_samples, pi_list) # Randomly determine the number of samples in each cluster using the mixture coefficients\n\n    for i in range(num_clusters):\n        # Generate samples for each cluster\n        cluster_samples = sample_multivariate_gaussian(mu_list[i], sigma_list[i], cluster_sizes[i])\n        samples.append(cluster_samples)\n\n    # Combine the samples and return them\n    return np.vstack(samples)\n```\n\n## Preparing the data\n\n```py\n# Prepare sample data\n# Create a Gaussian mixture distribution with random variable X = [x0, x1], Mu = [mu0, mu1], and latent variable Z = [z0, z1, z2].\n\n# Cluster 0\nmu0 = np.array([0, -0.5])\nsigma0 = np.array([[1.0, 0], [0, 1.0]])\n# Cluster 1\nmu1 = np.array([2.5, 2])\nsigma1 = np.array([[0.5, 0.3], [0.3, 0.7]])\n\n# Cluster 2\nmu2 = np.array([-2, 1.5])\nsigma2 = np.array([[1.2, 0.2], [0.2, 0.4]])\n\n# Combine data\nmu_list = [mu0, mu1, mu2]\nsigma_list = [sigma0, sigma1, sigma2]\npi_list = [0.45, 0.25, 0.3]\n\n# Number of sample data points\nNUM_DATA = 500\n\n# Generate samples from the Gaussian mixture distribution\nsamples = sample_mixture_gaussian(mu_list, sigma_list, pi_list, num_samples=NUM_DATA)\n\nsamples[:10]\n```\n\n## Plotting the Gaussian Mixture Distribution\n\n```py\ndef plot_mixture_gaussian(mu_list, sigma_list, pi_list, samples=None, figsize=(8,6)):\n    x_range = np.linspace(-5, 5, 100)\n    y_range = np.linspace(-5, 5, 100)\n    X, Y = np.meshgrid(x_range, y_range)\n    Z = np.zeros((len(x_range), len(y_range)))\n\n    # Calculate the probability density for each coordinate\n    for i in range(len(x_range)):\n        for j in range(len(y_range)):\n            x = np.array([x_range[i], y_range[j]])\n            Z[i, j] = mixture_gaussian_densty(x, mu_list, sigma_list, pi_list)\n\n    plt.figure(figsize=figsize)\n    if samples is not None:\n        plt.scatter(samples[:, 1], samples[:, 0], color='red', s=10, label='Samples')\n    plt.contour(X, Y, Z, cmap='viridis')\n    plt.colorbar(label='Density')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.title('Mixture Gaussian Distribution')\n    plt.show()\n\nplot_mixture_gaussian(mu_list, sigma_list, pi_list, samples)\n```\n\n# Estimating Clusters from Samples\n\n`To be considered later`\n\n# Estimating Parameters of the Mixture Gaussian Distribution from Samples\n\n## Maximum Likelihood Estimation\n\n\"Likelihood maximization\" is one of the methods to estimate the distribution from the sample data.\n\n$$\nLikelihood~function:{\\cal L}(\\theta;\\mathbf x)=\\prod_{i=1}^nP(x_i;\\theta),\\quad Maximum~likelihood~estimator:\\theta^\\star=\\arg\\max_\\theta{\\cal L}(\\theta;\\mathbf x)\\quad(n:Number~of~samples)\n$$\n\nReference: https://cochineal19.hatenablog.com/entry/2021/11/08/003751\n\n## Define the log likelihood function\n\nIt's hard to calculate the likelihood function directly because it's a product of many probabilities. Therefore, it is common to use the log likelihood function.\n\nThere is no effect on the maximum value of the function because the logarithm is a monotonically increasing function.\n\n$$\n{\\cal L}(\\mu,\\Sigma,\\pi;\\mathbf x)=\\prod_{i=1}^np(\\mathbf x;\\mu,\\Sigma,\\pi)=\\prod_{i=1}^n\\sum_{k=1}^n\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)\\\\\\to\\log{\\cal L}(\\mu,\\Sigma,\\pi;\\mathbf x)=\\log\\prod_{i=1}^n\\sum_{k=1}^n\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)=\\sum_{i=1}^n\\log\\sum_{k=1}^n\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)\n$$\n\n```py\ndef log_likelihood(mu_list, sigma_list, pi_list, sample):\n  log_likelihood = 0\n  for i in range(len(sample)):\n    log_likelihood += np.log(mixture_gaussian_densty(sample[i], mu_list, sigma_list, pi_list))\n\n  return log_likelihood\n```\n\n## Defining the Burden Rate\n\nSince we need to find the prior distribution \\( p(z|x) \\) of \\( p(x|z) \\), the prior probability of each cluster for a given data point \\( \\mathbf{x_i} \\) is expressed as follows:\n\n$$\np_{\\mu,\\Sigma,\\pi}(z_{ik}=1|\\mathbf{x_i}) = \\frac{\\pi_k{\\cal N}(\\mathbf{x_i};\\mu_k,\\Sigma_k)}{\\sum_{j=1}^K \\pi_j {\\cal N}(\\mathbf{x_i};\\mu_j,\\Sigma_j)} \\equiv \\gamma(z_{ik})\n$$\n\nIntuitively, we are calculating the probability that the distribution of each cluster fits the given data point.\n\n```py\ndef responsibility(data, mu_list, sigma_list, pi_list):\n    gamma = np.zeros((len(data), len(pi_list)))\n    for i in range(len(data)):\n        for j in range(len(pi_list)):\n            gamma[i, j] = pi_list[j] * gaussian_density(data[i], mu_list[j], sigma_list[j])\n        gamma[i] /= np.sum(gamma[i])\n    return gamma\n```\n\n### Classifying Using the Burden Rate\n\nTo perform classification, we need to find:\n\n$$\nz^\\star = \\argmax_{z_{ik}} \\gamma(z_{ik})\n$$\n\nThis gives us the cluster with the highest responsibility for each data point.\n\n```python\ndf = pd.DataFrame(samples[:, [1, 0]], columns=['x', 'y'])\ngamma = responsibility(samples, mu_list, sigma_list, pi_list)\ndf['gamma0'] = gamma[:, 0]\ndf['gamma1'] = gamma[:, 1]\ndf['gamma2'] = gamma[:, 2]\ndf['z_star'] = df[['gamma0', 'gamma1', 'gamma2']].idxmax(axis=1)\n\nx_range = np.linspace(-5, 5, 100)\ny_range = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x_range, y_range)\nZ = np.zeros((len(x_range), len(y_range)))\n\n# Calculate probability density for each coordinate\nfor i in range(len(x_range)):\n    for j in range(len(y_range)):\n        x = np.array([x_range[i], y_range[j]])\n        Z[i, j] = mixture_gaussian_density(x, mu_list, sigma_list, pi_list)\n\nsns.scatterplot(x='x', y='y', hue='z_star', data=df, palette='viridis')\nplt.contour(X, Y, Z, cmap='viridis')\nplt.colorbar(label='Density')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Mixture Gaussian Distribution')\nplt.show()\n```\n\n## Learning\n\nTo maximize the log-likelihood, we need to solve:\n\n$$\n\\argmax_{\\mu,\\Sigma,\\pi} \\log {\\cal L}(\\mu, \\Sigma, \\pi; \\mathbf{x}) = \\argmax_{\\mu,\\Sigma,\\pi} \\sum_{i=1}^n \\log \\sum_{k=1}^K \\pi_k N(\\mathbf{x} | \\mu_k, \\Sigma_k)\n$$\n\nIn this case, the log-sum part makes it difficult to solve analytically → We optimize it using the Expectation-Maximization (EM) algorithm.\n\n### Initialize the parameters\n\nSet randomly\n\n### E-Step\n\nCalculate the responsibility for each data point at the current step:\n\n$$\np_{\\mu,\\Sigma,\\pi}(z_{ik}=1|\\mathbf x_i)=\\frac{\\pi_k{\\cal N}(\\mathbf x_i;\\mu_k,\\Sigma_k)}{\\sum_{j=1}^K\\pi_j{\\cal N}(\\mathbf x_i;\\mu_j,\\Sigma_j)}\\equiv\\gamma(z_{ik})\n$$\n\n### M-Step\n\nUpdate the parameters to maximize the likelihood using the responsibilities:\n\n$$\n\\begin{aligned}\n&\\frac{\\partial{\\cal L}}{\\partial\\mu_k}=0\\to\\mu_k=\\frac{1}{N_k}\\sum_{i=1}^n\\gamma(z_{ik})\\mathbf x_i\\\\\n&\\frac{\\partial{\\cal L}}{\\partial\\Sigma_k}=0\\to\\Sigma_k=\\frac{1}{N_k}\\sum_{i=1}^n\\gamma(z_{ik})(\\mathbf x_i-\\mu_k)(\\mathbf x_i-\\mu_k)^T\n\\end{aligned}\n\\quad\\left(N_k=\\sum_{i=1}^n\\gamma(z_{ik})\\right)\n$$\n\nFor $\\pi_k$, since $\\sum_{k=1}^K\\pi_k=1$, we use the Lagrange multiplier method to maximize the likelihood:\n\n$$\n\\frac{\\partial G}{\\partial\\pi_k}=0\\to\\pi_k=\\frac{N_k}{\\sum_{k=1}^KN_k}\\quad\\left(G={\\cal L}+\\lambda\\left(\\sum_{k=1}^K\\pi_k-1\\right)\\right)\n$$\n\n### Convergence Condition\n\nIf the change in the likelihood meets a predefined threshold $\\epsilon$:\n\n$$\n{\\cal L}_{new}-{\\cal L}_{old}<\\epsilon\n$$\n\nthen stop the iterations; otherwise, repeat the EM steps.\n\n```python\n# Number of clusters (You can use methods to find the optimal number)\nK = 3\n\n# Initialize random mean vectors (2D)\nmu_list = [np.random.randn(2) for _ in range(K)]\n\n# Initialize random covariance matrices (2x2)\nsigma_list = []\nfor _ in range(K):\n    A = np.random.randn(2, 2)\n    sigma = np.dot(A, A.T)  # Create symmetric and positive definite matrices\n    sigma_list.append(sigma)\n\n# Initialize random mixing coefficients and normalize\npi_list = np.random.rand(K)\npi_list = pi_list / np.sum(pi_list)\n\n# Display the results\nprint(\"mu_list:\", mu_list)\nprint(\"sigma_list:\", sigma_list)\nprint(\"pi_list:\", pi_list)\n\nn_iter = 0\n\nlikely = log_likelihood(mu_list, sigma_list, pi_list, samples) / NUM_DATA\nprint('Iteration: {0}, log_likelihood: {1}'.format(n_iter, likely))\nplot_mixture_gaussian(mu_list, sigma_list, pi_list, samples, figsize=(4,3))\n\nth = 0.0001\n\nwhile True:\n  n_iter += 1\n\n  # E-Step\n  gamma = responsibility(samples, mu_list, sigma_list, pi_list)\n  n_k = np.sum(gamma, axis=0)\n\n  # M-Step\n\n  # Update pi\n  pi_list_next = (n_k / n_k.sum()).tolist()\n\n  # Update mu\n  mu_list_next = list(((samples.T @ gamma) / n_k).T)\n\n  # Update Sigma\n  sigma_list_next = []\n  for k in range(len(pi_list)):\n    sigma_k = np.zeros_like(sigma_list[k], dtype=float)\n    for i in range(len(samples)):\n      sigma_k += gamma[i, k] * np.matmul(\n          (samples[i] - mu_list[k]).reshape(-1, 1),\n          (samples[i] - mu_list[k]).reshape(1, -1)\n      )\n\n    sigma_list_next.append(sigma_k/n_k[k])\n\n  # Why deepcopy here? (Possibly due to reference issues)\n  # Also, why is 'next' converted to regular lists for all?\n  mu_list = copy.deepcopy(mu_list_next)\n  sigma_list = copy.deepcopy(sigma_list_next)\n  pi_list = copy.deepcopy(pi_list_next)\n\n  # Convergence condition\n  likely_before = likely\n  likely = log_likelihood(mu_list, sigma_list, pi_list, samples) / NUM_DATA\n  print('Iteration: {0}, log_likelihood: {1}'.format(n_iter, likely))\n  plot_mixture_gaussian(mu_list, sigma_list, pi_list, samples, figsize=(4,3))\n\n  delta = likely - likely_before\n  if delta < th:\n    break\n\n# Display results\nprint(\"mu_list:\", mu_list)\nprint(\"sigma_list:\", sigma_list)\nprint(\"pi_list:\", pi_list)\n```\n",
    "createdAt": "2025-07-09T03:20:03.308Z",
    "updatedAt": "2025-07-09T03:20:03.308Z"
  },
  {
    "title": "CSSの基礎",
    "summary": "HTMLをかっこいいデザインにする！",
    "tags": [
      "Web",
      "CSS",
      "HTML",
      "基礎"
    ],
    "slug": "html-css/basic-css",
    "folder": "html-css",
    "content": "\n# コードを書くための準備\n\n---\n\n## 開発環境がない場合\n\n1. ブラウザで _code pen_ と検索\n   [CodePen: Online Code Editor and Front End Web Developer ...](https://codepen.io/)\n1. 一番上のサイトを開く\n1. 左側にある「Start Coding」を押す\n1. htmlとcssを試すことができる！\n\n# HTMLとは\n\n1. **Hyper Text Markup Language**の略\n1. 文章を書きウェブサイトに上げることができる\n1. 「タグ」によって文字に役割を与えることができる\n1. デザインを変えたり，動きを与えることはHTMLだけではほぼ不可能\n\n```HTML\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My First HTML</title>\n  </head>\n  <body>\n    <h1>My First Heading</h1>\n    <p>My first paragraph.</p>\n    <a href=\"#\">This is a link</a>\n  </body>\n</html>\n```\n\n## タグの種類\n\n| タグ            | 概要                                             |\n| --------------- | ------------------------------------------------ |\n| `<html></html>` | htmlの外殻                                       |\n| `<head></head>` | ウェブサイトのタイトルや文字コードなど決める場所 |\n| `<body></body>` | サイトの内容を書く場所                           |\n| `<h1></h1>`     | 見出し                                           |\n\nほかにもめちゃくちゃある！\n\n# CSSとは\n\n---\n\n1. **Cascading Style Sheets** の略\n1. HTMLにデザインを指定できる\n\n# ボックスモデルを知ろう！\n\n---\n\n## WEBページはブロックの集まり\n\n### ボックスモデルとは？\n\nHTMLの要素はすべて四角形の領域で構成されているという考え方\n\n### ページの構造\n\nWEBサイトはボックスを並べたり，格納したり，重ねているだけ\n\n### ブロックとインライン\n\nボックスはブロックボックスとインラインボックスに分けられる (詳しくは別の回で)\n\n## 開発者ツールでページの構造を見てみよう！\n\n1. webページを開く\n   [https://google.com](https://google.com)\n1. `f12`キーを押す\n1. ごちゃごちゃした画面が出てきたら成功！\n\n## 明示的にボックスをつくろう！\n\n`<div>`タグは子要素をグループ化してくれるよ！\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"ja\">\n\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>○○テック講座</title>\n  </head>\n\n  <body>\n\n    <div>\n      <h1>○○テック講座</h1>\n      <p>Webサイトをつくろう！</p>\n    </div>\n\n    <div>\n      <h2>活動内容</h2>\n      <div>\n        <div>\n          <p>1. HTMLとCSSの基本を学ぶ</p>\n          <p>2. レスポンシブデザインを作成する</p>\n        </div>\n        <div>\n          <p>3. JavaScriptを使ったインタラクティブな機能を実装する</p>\n          <p>4. GitとGitHubの使い方を習得する</p>\n        </div>\n      </div>\n      <div>\n        <div>\n          <p>5. Rubyを学び、Webアプリケーションを作成する</p>\n          <p>6. チーム開発を体験する</p>\n        </div>\n        <div>\n          <p>7. ポートフォリオを作成する</p>\n          <p>8. もくもく会を開催する</p>\n        </div>\n    </div>\n\n    <div>\n      <div>\n        <h3>チームメンバー</h3>\n        <div>\n          <p>メンバー1: 山田太郎</p>\n          <p>メンバー2: 佐藤花子</p>\n        </div>\n        <div>\n          <p>メンバー3: 鈴木一郎</p>\n          <p>メンバー4: 中村幸子</p>\n        </div>\n      </div>\n      <div>\n        <h3>お問い合わせ</h3>\n        <div>\n          <p>メール: contact@example.com</p>\n          <p>電話: 03-1234-5678</p>\n        </div>\n      </div>\n    </div>\n\n  </body>\n\n</html>\n```\n\n開発者ツールで以下の二点を確認しよう！\n\n- divタグは普通目には見えない\n- divタグによってグループ化されている\n\n# 要素に名前をつけよう！\n\n---\n\n## 要素に名前をつけるって？？\n\n要素を並べるときに，\n\n- 「同じタグを区別できるようにしたい」\n- 「他とは違う要素だと示したい」\n- 「要素をグループに分けたい」\n- 「名前をつけて読みやすくしたい」\n\nなどの場合に，名前を付けます．つけた名前は，CSSやJavaScriptで使うことができます．その要素だけが持つ「id」と所属グループを示す「class」を指定することができます．\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My First HTML</title>\n  </head>\n  <body>\n    <div id=\"title\">\n      {/*idを指定*/}\n      <h1>My First HTML</h1>\n      <p>Welcome to my first HTML page.</p>\n    </div>\n    <div id=\"foods\" class=\"menu\">\n      {/*idとclassを指定*/}\n      <h2>My Favorite Foods</h2>\n      <ul>\n        <li>Pizza</li>\n        <li>Ice Cream</li>\n        <li>Chocolate</li>\n      </ul>\n    </div>\n    <div id=\"movies\" class=\"menu\">\n      {/*idとclassを指定*/}\n      <h2>My Favorite Movies</h2>\n      <ol>\n        <li>Star Wars</li>\n        <li>Indiana Jones</li>\n        <li>Back to the Future</li>\n      </ol>\n    </div>\n  </body>\n</html>\n```\n\n## idとclassの違い\n\n### class\n\n```html\n<要素名 class=“クラス名”>\n```\n\nほかの要素にも同じクラス名をつけてよい．グループ化をするのが主な目的\n\n### id\n\n```html\n<要素名 id=“id”>\n```\n\nclassとは違い一意の値でなければならないという規則がある\n\n## 各要素に名前をつけよう\n\n```html\n<!DOCTYPE html>\n<html lang=\"ja\">\n\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>○○テック講座</title>\n    <link rel=\"stylesheet\" href=\"stylesheet.css\">\n  </head>\n\n  <body>\n\n    <div id=\"header\">\n      <h1>○○テック講座</h1>\n      <p>Webサイトをつくろう！</p>\n    </div>\n\n    <div id=\"activities\">\n      <h2>活動内容</h2>\n      <div id=\"first-semister\" class=\"activity-list\">\n        <div>\n          <p>1. HTMLとCSSの基本を学ぶ</p>\n          <p>2. レスポンシブデザインを作成する</p>\n        </div>\n        <div>\n          <p>3. JavaScriptを使ったインタラクティブな機能を実装する</p>\n          <p>4. GitとGitHubの使い方を習得する</p>\n        </div>\n      </div>\n      <div id=\"second-semister\" class=\"activity-list\">\n        <div>\n          <p>5. Rubyを学び、Webアプリケーションを作成する</p>\n          <p>6. チーム開発を体験する</p>\n        </div>\n        <div>\n          <p>7. ポートフォリオを作成する</p>\n          <p>8. もくもく会を開催する</p>\n        </div>\n    </div>\n\n    <div id=\"team-contact\">\n      <div class=\"team-section\">\n        <h3>チームメンバー</h3>\n        <div>\n          <p>メンバー1: 山田太郎</p>\n          <p>メンバー2: 佐藤花子</p>\n        </div>\n        <div>\n          <p>メンバー3: 鈴木一郎</p>\n          <p>メンバー4: 中村幸子</p>\n        </div>\n      </div>\n      <div class=\"contact-section\">\n        <h3>お問い合わせ</h3>\n        <div>\n          <p>メール: contact@example.com</p>\n          <p>電話: 03-1234-5678</p>\n        </div>\n      </div>\n    </div>\n\n  </body>\n\n</html>\n```\n\nできあがったらLive-serverでサイトを立ち上げ，f12で探索しよう！\n開発者ツールで以下の一点を確認しよう！\n\n- 「elements」タブに表示される各要素に名前が設定されている\n\n# CSSの書き方\n\n---\n\n## 三種類の書き方\n\n### インラインスタイル\n\n特定の要素に対して直接スタイルを指定する手法\n\n直感的だが，同じコードを何度も書く必要がある場合が存在する\n\n### 内部スタイルシート\n\nHTMLファイルの中にCSSを書く欄を設け，セレクタによってスタイルを割り当てる手法．\n\n外部ファイルがいらないが，ほかのページでコードの再利用ができない\n\n### 外部スタイルシート\n\nCSSを記述するファイルを用意し，セレクタによってスタイルを割り当てる手法．\n\nスタイルの共通化ができ，管理もしやすい\n\n## 基本文法\n\n1. セレクタで対象の要素を指定する\n1. プロパティで設定したいスタイルを指定する\n1. バリューでスタイルの数値を適用する\n\n## セレクタによる要素の指定方法例\n\n| セレクタ                      | 構文例                 | 概要                                   |\n| ----------------------------- | ---------------------- | -------------------------------------- |\n| 要素セレクタ                  | `div`                  | 指定のタグを持つ要素に適用             |\n| クラスセレクタ                | `.hogeHope`            | 指定のクラスを持つ要素に適用           |\n| IDセレクタ                    | `#fuga_fuga`           | 指定のIDを持つ要素に適用               |\n| IDセレクタ and クラスセレクタ | `#fuga_fuga .hogeHope` | 親要素が指定された中の指定クラスに適用 |\n| 要素セレクタ or 要素セレクタ  | `div, h1`              | 複数種類のタグに適用                   |\n\nほかにもたくさんのセレクト手法があるよ！\n\n## プロパティの例\n\n| グループ     | プロパティ         | 概要                               |\n| ------------ | ------------------ | ---------------------------------- |\n| テキスト関連 | `color`            | テキストの色を変更する             |\n|              | `font-size`        | テキストのサイズを変更する         |\n|              | `text-align`       | 左揃え、中央揃え、右揃えを指定する |\n| ボックス関連 | `padding`          | ボックス内側の余白の幅を指定する   |\n|              | `margin`           | ボックス外側の余白の幅を指定する   |\n|              | `border`           | ボックスの枠線を設定する           |\n| 背景関連     | `background-color` | 背景色を変更する                   |\n| 配置関連     | `display`          | 横並びにしたり縦並びにしたりする   |\n\nほかにもたくさんのプロパティがあるよ！\n\n## バリューの例\n\n| グループ | バリュー例       | 概要                                                   |\n| -------- | ---------------- | ------------------------------------------------------ |\n| サイズ   | `1024px`         | 1ピクセル=0.26mm                                       |\n|          | `16rem`          | 1rem=ルートの要素のテキストサイズ（推奨）              |\n|          | `100vw, 100vh`   | 100vw=横幅のサイズ、100vh=縦幅のサイズ                 |\n| 色       | `red`            | 名前                                                   |\n|          | `#ff0000`        | 16進数                                                 |\n|          | `rgb(255, 0, 0)` | rgb表現                                                |\n| その他   | `flex`           | `display: flex`のように使う。子要素を横並びにできる    |\n| 配置関連 | `none`           | `border: none`のように使う。枠線を取り消すことができる |\n\nほかにもたくさんのバリューがあるよ！\n\n# CSSを適用する一連の流れ\n\n一旦整理しよう\n\n---\n\n## 1. index.htmlを書く\n\n1. head部分など基盤を作る\n1. body内に表示する内容を書く\n1. 適宜classやidを要素に与える\n1. 今回はさっき作ったhtmlファイルを使っちゃおう！\n\n## 2. cssファイルを置く，index.htmlでcssファイルを指定する\n\n1. index.htmlと同じ場所に「stylesheet.css」を配置！\n1. 次に，index.htmlファイルを開く\n1. `<head>`内に`<link rel=“stylesheet” href=“stylesheet.css”>`を追加！\n\n```html\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>○○テック講座</title>\n  <link rel=\"stylesheet\" href=\"stylesheet.css\" />\n</head>\n```\n\nこれでhtmlファイルとcssをつなげることができた！\n\n## 3. cssコードを書く\n\n1.  セレクタを使って適用する要素を指定する\n1.  プロパティを書き，デザインする\n1.  セレクタ×プロパティの組を並べていく\n\nひとまずbody要素にcssを適用して，どのようにデザインが変わるか確認してみよう！\n\n```css\nbody {\n  font-family: Arial, sans-serif; /*フォントを指定*/\n  line-height: 1.6; /*行間を1.6倍に*/\n  margin: 0; /*ページの外側の余白を0に*/\n  padding: 0; /*ページの内側の余白を0に*/\n  background-color: #f9f9f9; /*背景色を指定*/\n  color: #333; /*文字色を指定*/\n}\n```\n\n> CSSは覚えようとすると頭爆発します．実践あるのみ！\n\n# 4. 演習\n\n説明していないセレクタやプロパティなどがたくさん出てくるのでぜひ調べながら書いてください！\n\n---\n\n## 現時点のhtmlコード\n\n```html\n<!DOCTYPE html>\n<html lang=\"ja\">\n\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>○○テック講座</title>\n    <link rel=\"stylesheet\" href=\"stylesheet.css\">\n  </head>\n\n  <body>\n\n    <div id=\"header\">\n      <h1>○○テック講座</h1>\n      <p>Webサイトをつくろう！</p>\n    </div>\n\n    <div id=\"activities\">\n      <h2>活動内容</h2>\n      <div id=\"first-semister\" class=\"activity-list\">\n        <div>\n          <p>1. HTMLとCSSの基本を学ぶ</p>\n          <p>2. レスポンシブデザインを作成する</p>\n        </div>\n        <div>\n          <p>3. JavaScriptを使ったインタラクティブな機能を実装する</p>\n          <p>4. GitとGitHubの使い方を習得する</p>\n        </div>\n      </div>\n      <div id=\"second-semister\" class=\"activity-list\">\n        <div>\n          <p>5. Rubyを学び、Webアプリケーションを作成する</p>\n          <p>6. チーム開発を体験する</p>\n        </div>\n        <div>\n          <p>7. ポートフォリオを作成する</p>\n          <p>8. もくもく会を開催する</p>\n        </div>\n    </div>\n\n    <div id=\"team-contact\">\n      <div class=\"team-section\">\n        <h3>チームメンバー</h3>\n        <div>\n          <p>メンバー1: 山田太郎</p>\n          <p>メンバー2: 佐藤花子</p>\n        </div>\n        <div>\n          <p>メンバー3: 鈴木一郎</p>\n          <p>メンバー4: 中村幸子</p>\n        </div>\n      </div>\n      <div class=\"contact-section\">\n        <h3>お問い合わせ</h3>\n        <div>\n          <p>メール: contact@example.com</p>\n          <p>電話: 03-1234-5678</p>\n        </div>\n      </div>\n    </div>\n\n  </body>\n\n</html>\n```\n\n## タグに対するスタイリング\n\n各タグに対し適用\n\n```CSS\nbody {\n  font-family: Arial, sans-serif; /*フォントを指定*/\n  line-height: 1.6; /*行間を1.6倍に*/\n  margin: 0; /*ページの外側の余白を0に*/\n  padding: 0; /*ページの内側の余白を0に*/\n  background-color: #f9f9f9; /*背景色を指定*/\n  color: #333; /*文字色を指定*/\n}\n\ndiv {\n  padding: 20px; /*要素の内側の余白を20pxに*/\n  max-width: 800px; /*要素の最大幅を800pxに*/\n  margin: 20px auto; /*要素を中央寄せに*/\n  background-color: #fff; /*背景色を指定*/\n  border-radius: 8px; /*角丸を8pxに*/\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) /*影を指定*/;\n}\n\nh1, h2, h3 { /*h1, h2, h3タグを指定*/\n  color: #444; /*見出しの文字色を指定*/\n}\n\nh1 {\n  font-size: 2.5em; /*見出しの文字サイズを2.5emに*/\n  margin-bottom: 10px; /*見出しの下の余白を10pxに*/\n}\n\nh2 {\n  font-size: 1.8em; /*見出しの文字サイズを1.8emに*/\n  margin-top: 20px; /*見出しの上の余白を20pxに*/\n  border-bottom: 2px solid #e1e1e1; /*見出しの下に2pxの線を引く*/\n  padding-bottom: 5px; /*見出しの下の余白を5pxに*/\n}\n\nh3 {\n  font-size: 1.5em; /*見出しの文字サイズを1.5emに*/\n  margin-top: 15px; /*見出しの上の余白を15pxに*/\n}\n```\n\n## idに対するスタイリング\n\n各idやそれに付随するクラス，タグに対し適用\n\n```css\n#header {\n  text-align: center; /*テキストを中央寄せに*/\n}\n\n#header p {\n  /*親要素のidがheaderであるpタグを指定*/\n  font-size: 1.2em; /*文字サイズを1.2emに*/\n  color: #555; /*文字色を指定*/\n  margin-top: 5px; /*上の余白を5pxに*/\n}\n\n#activities {\n  margin-top: 30px; /*上の余白を30pxに*/\n}\n\n#activities .activity-list div {\n  /* 親要素のidがactivitiesで、クラスがactivity-listのdivタグを指定 */\n  margin-bottom: 15px; /*下の余白を15pxに*/\n}\n\n#activities .activity-list p {\n  /* 親要素のidがactivitiesで、クラスがactivity-listのpタグを指定 */\n  padding-left: 15px; /*左の余白を15pxに*/\n  text-indent: -15px; /*テキストを左に15pxずらす*/\n  list-style: inside disc; /*リストのマーカーを指定*/\n}\n\n#team-contact {\n  /*idがteam-contactの要素を指定*/\n  display: flex; /*要素を横並びに*/\n  flex-wrap: wrap; /*要素を折り返し表示*/\n  gap: 20px; /*要素間の間隔を20pxに*/\n}\n```\n\n## クラスに対するスタイリング\n\n各クラスやそれに付随するタグに対し適用\n\n```css\n.team-section,\n.contact-section {\n  /*クラスがteam-section、contact-sectionの要素を指定*/\n  flex: 1; /*要素を均等に広げる*/\n  min-width: 200px; /*要素の最小幅を200pxに*/\n}\n\n.team-section div,\n.contact-section div {\n  /*クラスがteam-section、contact-sectionのdivタグを指定*/\n  margin-bottom: 10px; /*下の余白を10pxに*/\n}\n\n.team-section p,\n.contact-section p {\n  /*クラスがteam-section、contact-sectionのpタグを指定*/\n  margin: 8px 0; /*上下の余白を8pxに*/\n}\n\n.contact-section {\n  background-color: #eef6f9; /*背景色を指定*/\n  border-left: 4px solid #0aa; /*左側に4pxの線を引く*/\n}\n```\n\n> ひとつのブロックを設定するごとに，どのようにデザインが変わったか確認してみましょう\n>\n> \\\n> コメントは書いても書かなくてもよいです\n\n完成したら確認しましょう！\n\n# まとめ\n\nとりあえず\n\n1. `index.html`を作りタグを駆使して文章を書く\n1. `head`内に`<link rel=\"stylesheet\" href=\"stylesheet.css\">`を追加する\n1. 同じディレクトリに`stylesheet.css`を作る\n1. `stylesheet.css`でデザインを指定する\n\nこのプロセスさえわかれば十分です！お疲れさまでした！\n",
    "createdAt": "2025-07-11T15:02:25.006Z",
    "updatedAt": "2025-07-11T15:03:45.416Z"
  },
  {
    "title": "Next.js App routerで，Custom 404 pageにレイアウトを適用させない方法",
    "summary": "地味に苦労した．日本語の記事がなかったのでつくる",
    "tags": [
      "React",
      "Next.js",
      "Web",
      "Webアプリ開発",
      "個人開発"
    ],
    "slug": "Next.js/next-js-app-router-404-layout",
    "folder": "Next.js",
    "content": "\n`Layout.tsx`は配置されているディレクトリの中身に適用される\n\n→ `not-found.tsx`と`page.tsx`とで違うディレクトリにすれば良い．\n\n→ 普通のディレクトリにいれるとルーティングされるので，論理グループを使う\n\n```txt\napp/\n    (default_site)/\n        /page.tsx\n        about/page.tsx\n        contact/page.tsx\n        layout.tsx\n    (error_layout)/\n        layout.tsx\n        not-found.tsx\ncomponents/\nutils/\n```\n\nこのように配置すればいい\n\n参考\n[How to remove the Layout on 404 page](https://github.com/vercel/next.js/discussions/37311)\n",
    "createdAt": "2025-07-11T13:23:19.958Z",
    "updatedAt": "2025-07-11T13:23:19.958Z"
  },
  {
    "title": "Next.jsで開発するときにおすすめのセットアップ手法",
    "summary": "eslintの設定やtailwind等の設定をいじって開発体験を上げる",
    "tags": [
      "Next.js",
      "eslint",
      "vscode",
      "tailwindcss"
    ],
    "slug": "Next.js/next-js-setup-practice",
    "folder": "Next.js",
    "content": "\n# ESlintの設定\n\n## ESlintとは\n\nESlintはJavaScriptやTypeScriptなどに使える静的解析ツールです．any型を許容するのか，アロー関数のみを使うのかなど，多岐に渡って厳密なルールを定義することでコードの一貫性を維持することができます．\n\n## おすすめの設定法\n\n### npmライブラリの追加\n\n`npx create-next-app@latest`し，以下のように設定した場合を想定します\n\n```bash\nWhat is your project named?  xxx\nWould you like to use TypeScript?  Yes\nWould you like to use ESLint?  Yes\nWould you like to use Tailwind CSS?  Yes\nWould you like your code inside a `src/` directory?  No\nWould you like to use App Router? (recommended)  Yes\nWould you like to use Turbopack for `next dev`?  Yes\nWould you like to customize the import alias (`@/*` by default)?  No\n```\n\nこの場合，デフォルトで以下のようなnpmパッケージが取り込まれます．\n\n```json\n  \"dependencies\": {\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"next\": \"14.2.29\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.2.29\"\n  }\n```\n\nここからさらにeslint関連のライブラリを追加していきます．\n| ライブラリ名 | 主な用途・特徴 |\n| ------------------------------------ | ---------------------------------------------------------------- |\n| **@typescript-eslint/eslint-plugin** | TypeScript向けのESLintルール集。型情報を活かした詳細な静的解析が可能になる。 |\n| **@typescript-eslint/parser** | ESLintにTypeScript構文を理解させるためのパーサ。これがないとTSコードにESLintが使えない。 |\n| **@eslint/eslintrc** | `.eslintrc` 設定ファイルの読み込みに使う内部ツール。通常不要だが、高度な設定やバージョン差異の吸収に使うこともある。 |\n| **eslint-plugin-import** | `import` 文の書き方（順序、重複、解決可能性）をチェック・補正するための定番プラグイン。 |\n| **eslint-plugin-import-access** | 特定のディレクトリや層に対するアクセス制限ルールを定義できる。Clean Architectureなどと相性が良い。 |\n| **eslint-plugin-simple-import-sort** | `import`, `export` をアルファベット順や指定順に自動整列してくれるプラグイン。整形の補助に便利。 |\n| **eslint-plugin-unused-imports** | 使用されていない `import` を検出・削除（自動修正対応）してくれる。不要コード削減に有効。 |\n\n```bash\nnpm install -D \\\n  @typescript-eslint/eslint-plugin \\\n  @typescript-eslint/parser \\\n  @eslint/eslintrc \\\n  eslint-plugin-import \\\n  eslint-plugin-import-access \\\n  eslint-plugin-simple-import-sort \\\n  eslint-plugin-unused-imports\n```\n\n## eslint.config.mjsの設定\n\ncreate-next-app時にeslintを追加した場合，自動で`.eslintrc.json`が作成されます．ただしjsonで書く場合柔軟性がなくなるので，代わりにフラット構成(`eslint.config.mjs`)で使うべきです．\n\n```js\n// /eslint.config.mjs\nimport { fixupConfigRules, fixupPluginRules } from \"@eslint/compat\";\nimport { FlatCompat } from \"@eslint/eslintrc\";\nimport js from \"@eslint/js\";\nimport typescriptEslint from \"@typescript-eslint/eslint-plugin\";\nimport tsParser from \"@typescript-eslint/parser\";\nimport importAccess from \"eslint-plugin-import-access/flat-config\";\nimport simpleImportSort from \"eslint-plugin-simple-import-sort\";\nimport unusedImports from \"eslint-plugin-unused-imports\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n  recommendedConfig: js.configs.recommended,\n  allConfig: js.configs.all,\n});\n\nexport default [\n  {\n    ignores: [\"coverage\", \".next\", \"*.config.mjs\", \"components/ui/**/*\"],\n  },\n  ...fixupConfigRules(\n    compat.extends(\n      \"plugin:@typescript-eslint/recommended\",\n      \"next/core-web-vitals\",\n      \"plugin:import/recommended\",\n      \"plugin:import/warnings\",\n    ),\n  ),\n  {\n    plugins: {\n      \"@typescript-eslint\": fixupPluginRules(typescriptEslint),\n      \"simple-import-sort\": simpleImportSort,\n      \"unused-imports\": unusedImports,\n      \"import-access\": importAccess,\n    },\n    languageOptions: {\n      parser: tsParser,\n      ecmaVersion: \"latest\",\n      sourceType: \"module\",\n      parserOptions: {\n        project: \"./tsconfig.json\",\n        tsconfigRootDir: __dirname,\n      },\n    },\n    rules: {\n      \"@typescript-eslint/naming-convention\": [\n        \"error\",\n        {\n          selector: \"variable\",\n          types: [\"array\", \"boolean\", \"number\", \"string\"],\n          format: [\"strictCamelCase\", \"UPPER_CASE\"],\n        },\n        {\n          selector: \"variable\",\n          types: [\"function\"],\n          format: [\"strictCamelCase\", \"StrictPascalCase\"],\n        },\n      ],\n      \"simple-import-sort/imports\": \"error\",\n      \"simple-import-sort/exports\": \"error\",\n      \"import/first\": \"error\",\n      \"import/newline-after-import\": \"error\",\n      \"import/no-duplicates\": \"error\",\n      \"@typescript-eslint/consistent-type-exports\": \"error\",\n      \"import/group-exports\": \"error\",\n      \"unused-imports/no-unused-imports\": \"error\",\n      \"import-access/jsdoc\": [\"error\"],\n      \"no-restricted-imports\": [\n        \"error\",\n        {\n          paths: [\n            \"sonner\",\n            \"next/link\",\n            \"react-icons\",\n            \"lucide-react\",\n            \"zod\",\n            { name: \"@/components/ui/Form\", importNames: [\"Form\"] },\n            {\n              name: \"@next/third-parties/google\",\n              importNames: [\"sendGAEvent\"],\n            },\n          ],\n          patterns: [\"react-icons/*\"],\n        },\n      ],\n      \"no-restricted-syntax\": [\n        \"error\",\n        {\n          selector:\n            \"CallExpression[callee.object.name='Object'][callee.property.name='keys']\",\n          message:\n            \"Do not use Object.keys. Check src/utils/object.ts or add a new utility function.\",\n        },\n      ],\n      \"@typescript-eslint/no-unused-vars\": \"off\",\n      \"@typescript-eslint/no-unnecessary-type-assertion\": \"error\",\n    },\n  },\n  {\n    files: [\n      \"src/**/*.stories.tsx\",\n      \"src/**/*Type.ts\",\n      \"src/types/**\",\n      \"src/features/**/*Repository.ts\",\n      \"src/features/**/*Converter.ts\",\n      \"src/features/**/*Constants.ts\",\n    ],\n    rules: {\n      \"import/group-exports\": \"off\",\n    },\n  },\n  {\n    files: [\"components/icons/**/*.{ts,tsx}\"],\n    rules: {\n      \"no-restricted-imports\": \"off\",\n    },\n  },\n];\n```\n\n### コードの解説\n\n**1. モジュールのインポート部**\n\n```js\nimport { fixupConfigRules, fixupPluginRules } from \"@eslint/compat\";\nimport { FlatCompat } from \"@eslint/eslintrc\";\nimport js from \"@eslint/js\";\nimport typescriptEslint from \"@typescript-eslint/eslint-plugin\";\nimport tsParser from \"@typescript-eslint/parser\";\nimport importAccess from \"eslint-plugin-import-access/flat-config\";\nimport simpleImportSort from \"eslint-plugin-simple-import-sort\";\nimport unusedImports from \"eslint-plugin-unused-imports\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n```\n\n| 行                                        | 内容                                                                             |\n| ----------------------------------------- | -------------------------------------------------------------------------------- |\n| `@eslint/compat`                          | `.eslintrc` スタイルの設定（extends 等）をフラット構成用に変換するためのヘルパー |\n| `FlatCompat`                              | ↑の変換を実際に行うクラス。`plugin:xxx/recommended` などを使いたいときに必要     |\n| `@eslint/js`                              | ESLint公式の `recommended` 設定セット（ESLintが提供する基本ルール）              |\n| `@typescript-eslint/*`                    | TypeScriptのルール定義とパーサ。TS対応には必須                                   |\n| `eslint-plugin-import-access/flat-config` | import制限をJSDocに基づいて行うためのプラグイン（※フラット構成対応の入口）       |\n| その他のプラグイン                        | `simple-import-sort`, `unused-imports` → import順や未使用importの整理用          |\n| `path`, `fileURLToPath`                   | `__dirname` をESM形式で取得するための処理（Node.js ESMの都合）                   |\n\n**2. `__dirname` & `FlatCompat` の準備**\n\n```js\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n  recommendedConfig: js.configs.recommended,\n  allConfig: js.configs.all,\n});\n```\n\n| 行                        | 内容                                                                                                                 |\n| ------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| `__filename`, `__dirname` | CommonJSにないESM形式でのファイルパス取得                                                                            |\n| `FlatCompat(...)`         | `.eslintrc`で書かれたような設定（例: `\"plugin:@typescript-eslint/recommended\"`）をフラット構成でも使えるよう変換する |\n\n**3. エクスポートされる ESLint 設定本体**\n\n```js\nexport default [\n  ...\n];\n```\n\n**4. 無視ファイルの指定**\n\n```js\n{\n  ignores: [\n    \"coverage\",\n    \".next\",\n    \"*.config.mjs\",\n    \"components/ui/**/*\",\n  ],\n},\n```\n\n- ESLintがチェック対象から除外するファイルやフォルダを定義\n- `*.config.mjs`なども解析しないよう除外している（誤検出防止）\n\n**5. 従来の extends をそのまま使う（変換）**\n\n```js\n...fixupConfigRules(\n  compat.extends(\n    \"plugin:@typescript-eslint/recommended\",\n    \"next/core-web-vitals\",\n    \"plugin:import/recommended\",\n    \"plugin:import/warnings\",\n  )\n),\n```\n\n- `compat.extends(...)`：`.eslintrc`スタイルの `\"extends\"` を使えるように変換\n- `fixupConfigRules(...)`：ルールにプラグイン名を正しくプレフィックスしてくれる（例: `\"@typescript-eslint/no-unused-vars\"` に直してくれる）\n\n**6. メイン設定ブロック（ルール、プラグインなど）**\n\n```js\n{\n  plugins: {\n    \"@typescript-eslint\": fixupPluginRules(typescriptEslint),\n    \"simple-import-sort\": simpleImportSort,\n    \"unused-imports\": unusedImports,\n    \"import-access\": importAccess,\n  },\n  ...\n}\n```\n\n| セクション              | 内容                                                                   |\n| ----------------------- | ---------------------------------------------------------------------- |\n| `plugins`               | 使用するプラグインを ESLint に明示的に登録                             |\n| `fixupPluginRules(...)` | `@typescript-eslint` のルールを正しく使える形に整形                    |\n| `languageOptions`       | ECMAScriptやモジュール種別（ESM）、TypeScriptのパーサ情報              |\n| `parserOptions`         | `tsconfig.json` の場所を ESLint に教える（型情報を使いたいときに重要） |\n\n**7. ルール設定（重要）**\n\n```js\nrules: {\n  \"@typescript-eslint/naming-convention\": [...],\n  \"simple-import-sort/imports\": \"error\",\n  \"simple-import-sort/exports\": \"error\",\n  ...\n}\n```\n\n| ルール名                           | 内容                                                                 |\n| ---------------------------------- | -------------------------------------------------------------------- |\n| `naming-convention`                | 変数名の形式を強制（camelCase, PascalCase など）                     |\n| `simple-import-sort/*`             | import/export 文を自動でソート                                       |\n| `unused-imports/no-unused-imports` | 未使用の import をエラーに                                           |\n| `import/first`                     | import文はファイルの先頭に書け                                       |\n| `import/no-duplicates`             | 同じモジュールを複数回 import するな                                 |\n| `import/group-exports`             | export はまとめて書け（バラバラに書かない）                          |\n| `import-access/jsdoc`              | JSDocコメントに従って層間importを制限（例: infra → domain 禁止など） |\n| `no-restricted-imports`            | 特定のモジュールやimport名を禁止（使ってほしくないライブラリなど）   |\n| `no-restricted-syntax`             | 特定の構文（例: `Object.keys`）の使用を禁止し、独自実装を促す        |\n\n**8. 特定ファイルへのルール適用除外**\n\n```js\n{\n  files: [...],\n  rules: {\n    \"import/group-exports\": \"off\",\n  },\n},\n{\n  files: [\"components/icons/**/*.{ts,tsx}\"],\n  rules: {\n    \"no-restricted-imports\": \"off\",\n  },\n},\n```\n\n- 特定のファイルパターン（例: `*.stories.tsx`, `*Type.ts`）にだけルールを変更\n- `group-exports`を無効にすることで、柔軟にexport可能にしている\n\n# tailwindの設定\n\nTailwind CSS は通常の CSS や JS 文法とは違う「ユーティリティクラスを文字列で書くスタイル」なので，エラーチェックや構文チェックができません．そのためこれらの設定をeslintに追加していきます\n\n## npm の追加\n\n```bash\nnpm install -D eslint-plugin-readable-tailwind\n```\n\n## eslint.config.mjsの設定\n\n### import\n\n```js\nimport readableTailwind from \"eslint-plugin-readable-tailwind\";\n```\n\n### `ignores`に追記\n\n```js\n  {\n    ignores: [\n      \"coverage\",\n      \".next\",\n      \"*.config.mjs\",\n      \"tailwind.config.ts\",  // ←追加\n      \"components/ui/**/*\",\n    ],\n  },\n```\n\n### `compat.extends(...)` に追記\n\n```js\n...fixupConfigRules(\n  compat.extends(\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:import/recommended\",\n    \"plugin:import/warnings\",\n    \"plugin:tailwindcss/recommended\", // ←追加\n  )\n),\n```\n\n### `plugins`に追加\n\n```js\nplugins: {\n  \"@typescript-eslint\": fixupPluginRules(typescriptEslint),\n  \"simple-import-sort\": simpleImportSort,\n  \"unused-imports\": unusedImports,\n  \"import-access\": importAccess,\n  \"readable-tailwind\": readableTailwind, // ←追加\n},\n```\n\n### Tailwindの `settings`（`cn()` など補完関数を解析させたい場合）\n\n```js\nsettings: {\n  tailwindcss: {\n    callees: [\"cn\", \"cva\"], // `cn()` や `cva()` の中のclass名もチェック対象に\n  },\n},\n```\n\n### `rules`を追加\n\n```js\n      \"tailwindcss/no-custom-classname\": [\n        \"error\",\n        {\n          classRegex:\n            \"^(class(Name)?|textClassName|iconClassName|innerClassName)$\",\n          whitelist: [\"^[A-Z].*\"],\n        },\n      ],\n      \"readable-tailwind/multiline\": [\n        \"warn\",\n        {\n          group: \"newLine\",\n        },\n      ],\n```\n\n- `no-custom-classname`：カスタムクラスの混入を制限\n- `readable-tailwind/multiline`: Tailwindクラスを折り返して可読性を高める（複数行に分ける）\n\n## tailwind.config.tsの設定\n\nなぜかスタイリングされないといった事象が発生した場合，このファイルを確認することをお勧めします．\n\n```ts\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./features/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n```\n\nコンポーネントの場所が設定されていない可能性があります．\n\n# prettierの設定\n\nPrettierはコード整形を自動で揃えるフォーマッタです．eslintも一部はコード整形を行いますが，これはより拡張的です．\n\n## eslint.config.mjsの設定\n\n### ライブラリの追加\n\n```bash\nnpm install -D \\\n  prettier \\\n  prettier-plugin-tailwindcss \\\n  eslint-config-prettier\n```\n\n<blockquote>\n※ eslint-plugin-prettier を使いたい場合は、最後に以下を追加：\n\n```bash\nnpm install -D eslint-plugin-prettier\n```\n\n</blockquote>\n\n| ライブラリ名                  | 役割・説明                                                                                                         |\n| ----------------------------- | ------------------------------------------------------------------------------------------------------------------ |\n| `prettier`                    | コード整形本体。インデントや改行、スペースなどのスタイルを一貫して整える。                                         |\n| `prettier-plugin-tailwindcss` | Tailwindのユーティリティクラスを自動で**推奨順に並べ替える**Prettierプラグイン。                                   |\n| `eslint-config-prettier`      | ESLintの整形系ルールとPrettierのルールが競合しないように、ESLint側の整形ルールを無効化する。                       |\n| `eslint-plugin-prettier`      | Prettierの整形ルール違反を**ESLintの警告として表示する**ためのプラグイン（VSCodeで保存時整形する場合は省略可能）。 |\n\n### `compat.extends(...)` に追記\n\n```js\n...fixupConfigRules(\n  compat.extends(\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:import/recommended\",\n    \"plugin:import/warnings\",\n    \"plugin:tailwindcss/recommended\",\n    \"prettier\", // ←追加\n  )\n),\n```\n\n# vscodeの設定\n\nプロジェクトに`.vscode`ディレクトリを配置し，その中にjsonファイルを配置するとvscode専用のプロジェクトごとのエディタ設定を置くことができます．\n\n## 使えるファイル\n\n| ファイル名        | 用途・できること                                               |\n| ----------------- | -------------------------------------------------------------- |\n| `settings.json`   | エディタの動作や拡張機能の設定（保存時整形、インデント幅など） |\n| `extensions.json` | 推奨拡張機能の一覧（プロジェクト参加者に自動で通知される）     |\n| `launch.json`     | デバッガーの設定（Node.jsやChromeのステップ実行など）          |\n| `tasks.json`      | ターミナルで実行するタスクを定義（ビルド・lint・test など）    |\n\n## settings.jsonの設定\n\nここではeslintやprettier関連の設定をし，ファイル保存時に自動で整形が走るようにします．\n\n```json\n{\n  \"editor.formatOnSave\": true,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": \"explicit\",\n    \"source.fixAll.eslint\": \"explicit\",\n    \"source.organizeImports\": \"explicit\"\n  },\n  \"typescript.preferences.importModuleSpecifier\": \"non-relative\",\n  \"typescript.tsdk\": \"node_modules/typescript/lib\",\n  \"tailwindCSS.classAttributes\": [\"class\", \"className\", \".*Class\"],\n  \"tailwindCSS.experimental.classRegex\": [\n    [\"cva\\\\(([^)]*)\\\\)\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"],\n    [\"cn\\\\(([^)]*)\\\\)\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"],\n    [\"cx\\\\(([^)]*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"]\n  ]\n}\n```\n\n| 設定キー                                            | 内容・説明                                                                              |\n| --------------------------------------------------- | --------------------------------------------------------------------------------------- |\n| `\"editor.formatOnSave\"`                             | ファイル保存時に自動でコード整形（Prettierなどが有効になる）                            |\n| `\"editor.defaultFormatter\"`                         | Prettier拡張機能（`esbenp.prettier-vscode`）を整形エンジンとして使用                    |\n| `\"editor.codeActionsOnSave.source.fixAll\"`          | 明示的に保存したときのみ、すべての問題（Lint等）を一括修正                              |\n| `\"editor.codeActionsOnSave.source.fixAll.eslint\"`   | 明示的に保存したときのみ、ESLintの警告・エラーを自動修正                                |\n| `\"editor.codeActionsOnSave.source.organizeImports\"` | 明示的に保存したときのみ、不要なimport削除＆並び替え                                    |\n| `\"typescript.preferences.importModuleSpecifier\"`    | TypeScriptのimport補完を相対パスではなく絶対パス（非相対）にする                        |\n| `\"typescript.tsdk\"`                                 | VSCodeが使用するTypeScriptバージョンをプロジェクト内の `node_modules/typescript` に固定 |\n| `\"tailwindCSS.classAttributes\"`                     | Tailwindの補完対象となる属性名（`class`, `className`, `iconClassName`など）を指定       |\n| `\"tailwindCSS.experimental.classRegex\"`             | `cn()`, `cva()`, `cx()` のような関数内でもTailwindクラスを認識させる正規表現設定        |\n\n## extensions.jsonの設定\n\nプロジェクトで使うべき VSCode 拡張機能のおすすめ一覧を示し，プロジェクトに適用することができます．\n\n```json\n{\n  \"recommendations\": [\n    \"dbaeumer.vscode-eslint\", // ESLintのエラー表示・自動修正を有効にする拡張\n    \"esbenp.prettier-vscode\", // Prettierで保存時整形をする拡張\n    \"bradlc.vscode-tailwindcss\" // Tailwindクラスの補完・色表示をしてくれる拡張\n  ]\n}\n```\n\n# まとめ\n\n以上のことをすると構文チェックができ，ファイル保存時に自動でフォーマッティングされます．すごく頼もしいです．\n",
    "createdAt": "2025-07-12T10:08:13.145Z",
    "updatedAt": "2025-07-12T12:46:24.762Z"
  },
  {
    "title": "Next.jsとRailsで作るwebアプリ",
    "summary": "Next.jsとRailsでapi開発の勉強をしたのでここにメモしておきます",
    "tags": [
      "Next.js",
      "webアプリ開発",
      "Ruby on Rails",
      "API"
    ],
    "slug": "Next.js/next-rails-tutorial",
    "folder": "Next.js",
    "content": "\n# バックエンド\n\n## railsプロジェクト作成\n\n---\n\n```bash\nrails new blog_api --api -T\n```\n\n`--api`とすることで，viewなどの余計なファイルの作成がされなくなります．また，`-T`とすると，テスト用のファイルが生成されなくなります．\n\n## gemの追加\n\n---\n\n```ruby\n# Gemfile\n  gem 'rack-cors', require: 'rack/cors'\n```\n\nNext.jsアプリのリクエストを受け付ける際にcorsの設定をする必要があるので，`rack-cors`のgemを追加します．その後，`bundle install`することを忘れないようにしましょう\n\n## rack-corsの設定\n\n---\n\nここで許可するオリジンを設定しておきましょう\n\n```ruby\n# config/initializers/cors.rb\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins \"http://localhost:3000\"\n\n    resource \"*\",\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head]\n  end\nend\n```\n\n## モデル作成\n\n---\n\nデータベースに登録したいテーブルのモデルを作ります．\n\n```bash\nrails generate model Post title:string content:text\n```\n\nこの場合，dbには`posts`というテーブルが追加されることになります．\n\n### 作成されるファイル\n\n#### **マイグレーションファイル**\n\nデータベースのテーブルを作成するためのファイル．`rails db:migrate`をするとはじめて実行される\n\n```ruby\n# db/migrate/20250209064827_create_posts.rb\nclass CreatePosts < ActiveRecord::Migration[7.2]\n  def change\n    create_table :posts do |t|\n      t.string :title\n      t.text :content\n\n      t.timestamps\n    end\n  end\nend\n```\n\n> モデルは単数形で一文字目が大文字，テーブルは複数形で全て小文字で記述するのが慣習\n\n#### **モデルファイル**\n\nここに記述されたクラスを用いて，コントローラなどでデータベースの操作を行う．バリデーションやアソシエーションなどを記述することも可能\n\n```ruby\n# app/models/post.rb\nclass Post < ApplicationRecord\nend\n```\n\n#### **テストファイル**\n\n今回は`rails new blog_api --api -T`で`-T`オプションを指定しているため，テストファイルは作成されない\n\n#### **シードファイル**\n\nなにも書かれていないが，特にシードデータを追加する必要があれば，`Post.create`を使って初期データを登録することも可能\n\n## マイグレーション\n\n---\n\n```bash\nrails db:migrate\n```\n\n> `db/schema.rb`にデータベースのスキーマが記述される\n\n## コントローラ作成\n\n---\n\nコントローラは，ユーザからのリクエストを受け取り，適切な処理を行い，レスポンスを返す役割を持ちます．それぞれのコントローラはルーティングを設定することによりリクエストが可能になります．\n\n> **MVCモデルとは**\\\n> ソフトウェアアーキテクチャの一つ．アプリケーションの構造をmodel, view, controllerの3つに分けることで，コードの整理や保守性を向上させることができる．\n\n### コントローラ作成\n\n```bash\nrails generate controller Api::v1::Posts index show create update destroy\n```\n\n> コントローラの設定を間違えた場合，`rails destroy controller Api::v1::Posts`で削除できる\n\n#### **作成されるファイル**\n\n##### **コントローラファイル**\n\nコントローラの処理を記述するファイル．`render`メソッドでレスポンスを返す．以下のように記述することで，json形式でデータを返すことができます．\n\n今回は，**投稿一覧**，**特定の投稿**が取得できるコントローラ，投稿内容を**作成**，**編集**，**削除**できるコントローラを作っていきます\n\n```ruby\n# app/controllers/api/v1/posts_controller.rb\nclass Api::V1::PostsController < ApplicationController\n  def index\n    @posts = Post.all\n\n    render json: @posts\n  end\n\n  def show\n    @post = Post.find(params[:id])\n\n    render json: @post\n  end\n\n  def create\n    @post = Post.new(post_params)\n\n    if @post.save\n      render json: @post, status: :created\n    else\n      render json: @post.errors, status: :unprocessable_entity\n    end\n  end\n\n  def update\n    @post = Post.find(params[:id])\n\n    if @post.update(post_params)\n      render json: @post\n    else\n      render json: @post.errors, status: :unprocessable_entity\n    end\n  end\n\n  def destroy\n    @post = Post.find(params[:id])\n\n    @post.destroy\n  end\n\n  private\n\n  def post_params\n    params.require(:post).permit(:title, :content)\n  end\nend\n```\n\n> `@`がついている変数はインスタンス変数．`:`がついている変数はシンボル．文字列の皮をかぶった整数値 \\\n> `status: :unprocessable_entity`は辞書 \\\n> `params` は Rails がリクエストのデータを自動でセットしてくれるオブジェクト\n\n##### **ルーティング**\n\n基本は既に設定されている．`config/routes.rb`で管理をしている\n\n```ruby\n# config/routes.rb\n\nRails.application.routes.draw do\n  namespace :api do\n    namespace :v1 do\n      resources :posts, only: [:index, :show, :create, :update, :destroy]\n    end\n  end\n  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html\n\n  # Reveal health status on /up that returns 200 if the app boots with no exceptions, otherwise 500.\n  # Can be used by load balancers and uptime monitors to verify that the app is live.\n  get \"up\" => \"rails/health#show\", as: :rails_health_check\n\n  # Defines the root path route (\"/\")\n  # root \"posts#index\"\nend\n```\n\n> `resources :posts, only: [:index, :show, :create, :update, :destroy]` とすると，これらは暗黙的に以下のルーティングが設定される\n> | HTTPメソッド | パス | コントローラ#アクション | 用途 |\n> | --- | --- | --- | --- |\n> | GET | /posts | posts#index | 一覧表示 |\n> | GET | /posts/:id | posts#show | 詳細表示 |\n> | POST | /posts | posts#create | 作成 |\n> | PUT | /posts/:id | posts#update | 更新 |\n> | DELETE | /posts/:id | posts#destroy | 削除 |\n>\n> これを各コントローラごとに設定することでrestfulなAPIを作成することができる\n\n### テスト\n\npostmanやcurlコマンドを使ってAPIのテストを行う\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"post\": {\"title\": \"初めての投稿です\", \"content\": \"初めての投稿です\"}}' http://localhost:3000/api/v1/posts\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"post\": {\"title\": \"2つ目の投稿です\", \"content\": \"2つ目の投稿です\"}}' http://localhost:3000/api/v1/posts\n\ncurl http://localhost:3000/api/v1/posts\ncurl http://localhost:3000/api/v1/posts/1\ncurl http://localhost:3000/api/v1/posts/2\n\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"post\": {\"title\": \"初めての投稿を更新しました\", \"content\": \"初めての投稿を更新しました\"}}' http://localhost:3000/api/v1/posts/1\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"post\": {\"title\": \"2つ目の投稿を更新しました\", \"content\": \"2つ目の投稿を更新しました\"}}' http://localhost:3000/api/v1/posts/2\n\ncurl -X DELETE http://localhost:3000/api/v1/posts/1\ncurl -X DELETE http://localhost:3000/api/v1/posts/2\n```\n\n## ポート番号の変更\n\n```bash\nrails s -p 3001\n```\n\n> 永続的に変更する場合は`config/puma.rb`を変更する\n\n# フロントエンド\n\nNext.js typescript App router, TailwindCSSを使っていきます．\n\n## プロジェクト作成\n\n---\n\n```bash\nnpx create-next-app blog_client\n```\n\n## 各種コンポーネントの作成\n\n---\n\n### 型定義ファイル\n\nバックエンド開発時に作ったモデルのスキーマと同じにすると良いです．\n\n```typescript\nexport type Post = {\n  id: number;\n  title: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n};\n```\n\n### 投稿一覧ページ\n\n#### **一覧ページ**\n\n一覧ページでは，`http://localhost:3000/api/v1/posts`にアクセスすることで，すべての投稿を取得します．各投稿には編集ボタンと削除ボタンを用意し，投稿作成ボタンも用意します．\n\n基本的にはSSRで実装していきますが，フォームなどはクライアント側で処理しないといけないので，それらは別途クライアントコンポーネントとして作成していきます．\n\n> **SSRとは**\\\n> サーバサイドレンダリングの意．クライアント側ではなくサーバ側で処理を済ますので負荷がかかりにくくセキュリティ面においても安全．\n\n```tsx\n// app/page.tsx\nimport { Post } from \"@/lib/types\";\nimport Link from \"next/link\";\nimport { DeletePost } from \"./_components/delete-post\";\n\nexport default async function Home() {\n  const res = await fetch(\"http://localhost:3001/api/v1/posts\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const posts: Post[] = await res.json();\n\n  return (\n    <div className=\"container mx-auto p-4 flex flex-col items-center\">\n      <h2 className=\"text-2xl font-bold mb-4\">Rails & Next.js Blog</h2>\n\n      <Link\n        href=\"/create-post\"\n        className=\"text-blue-500 hover:text-blue-700 mb-4\"\n      >\n        Create new Post\n      </Link>\n\n      <div className=\"mt-6 w-full max-w-2xl\">\n        {posts.map((post) => (\n          <div\n            key={post.id}\n            className=\"border border-gray-300 rounded-lg p-4 mb-4 shadow-md\"\n          >\n            <Link\n              href={`posts/${post.id}`}\n              className=\"text-xl font-semibold text-blue-600 hover:text-blue-800\"\n            >\n              {post.title}\n            </Link>\n\n            <p className=\"text-gray-700 mt-2\">{post.content}</p>\n\n            <div className=\"flex justify-end mt-4\">\n              <Link\n                href={`posts/${post.id}/edit-post`}\n                className=\"text-sm text-white bg-blue-500 hover:bg-blue-700 py-1 px-2 rounded mr-2\"\n              >\n                Edit\n              </Link>\n\n              <DeletePost id={post.id} />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n#### **削除コンポーネント**\n\nこちらはonClickをクライアント側で発火させなければならないため，`use client`を追加し，クライアントコンポーネントにします．\n\n```tsx\n// app/_components/delete-post.tsx\n\"use client\";\n\nexport const DeletePost = ({ id }: { id: number }) => {\n  const handleDelete = async (id: number) => {\n    const res = await fetch(`http://localhost:3001/api/v1/posts/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (res.ok) {\n      alert(\"Post deleted\");\n    } else {\n      alert(\"Failed to delete post\");\n    }\n  };\n\n  return (\n    <button\n      onClick={() => handleDelete(id)}\n      className=\"text-sm text-white bg-red-500 hover:bg-red-700 py-1 px-2 rounded\"\n    >\n      Delete\n    </button>\n  );\n};\n```\n\n### 投稿詳細ページ\n\nこちらでは，動的ルーティングを用いてidを取得し，対象の投稿を取得して表示します．\n\n```tsx\n// app/posts/[id]/page.tsx\nimport { Post } from \"@/lib/types\";\nimport Link from \"next/link\";\n\nexport default async function PostPage({\n  params,\n}: {\n  params: Promise<{ id: string }>;\n}) {\n  const { id } = await params;\n  const res = await fetch(`http://localhost:3001/api/v1/posts/${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const post: Post = await res.json();\n\n  return (\n    <div className=\"container mx-auto p-4 flex flex-col items-center\">\n      <div className=\"w-full max-w-2xl p-4\">\n        <h1 className=\"text-3xl font-bold mb-4\">{post.title}</h1>\n        <div className=\"text-gray-500 mb-4\">{post.created_at}</div>\n        <p className=\"text-gray-700\">{post.content}</p>\n        <Link href=\"/\" className=\"text-blue-500 hover:text-blue-700\">\n          投稿一覧に戻る\n        </Link>\n      </div>\n    </div>\n  );\n}\n```\n\n### 投稿作成ページ\n\nこちらは，クライアント側がフォームを編集しなければならないので，クライアントコンポーネントにします．\n\n```tsx\n// app/create-post/page.tsx\n\"use client\";\n\nimport Link from \"next/link\";\nimport { redirect } from \"next/navigation\";\n\nexport default function CreatePage() {\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const formData = new FormData(e.currentTarget);\n    const title = formData.get(\"title\") as string;\n    const content = formData.get(\"content\") as string;\n\n    const res = await fetch(\"http://localhost:3001/api/v1/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        title: title,\n        content: content,\n      }),\n    });\n\n    if (res.ok) {\n      redirect(\"/\");\n    } else {\n      alert(\"Failed to create post\");\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 flex flex-col items-center\">\n      <div className=\"w-full max-w-2xl\">\n        <h1 className=\"text-3xl font-bold mb-6\">ブログ新規登録</h1>\n\n        <form className=\"w-full\" onSubmit={handleSubmit}>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n              タイトル\n            </label>\n            <input\n              name=\"title\"\n              type=\"text\"\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            />\n          </div>\n\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n              本文\n            </label>\n            <textarea\n              name=\"content\"\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              投稿\n            </button>\n            <Link href=\"/\" className=\"text-blue-500 hover:text-blue-700\">\n              キャンセル\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n```\n\n### 投稿編集ページ\n\n#### **編集ページ**\n\nこちらは，パラメータを受け取るためにSSRし，編集ができるクライアントコンポーネントを渡しておきます\n\n```tsx\nimport { Post } from \"@/lib/types\";\nimport { EditForm } from \"./_components/form\";\n\nexport default async function EditPage({\n  params,\n}: {\n  params: Promise<{ id: string }>;\n}) {\n  const { id } = await params;\n  const res = await fetch(`http://localhost:3001/api/v1/posts/${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const post: Post = await res.json();\n\n  return <EditForm post={post} />;\n}\n```\n\n#### **編集フォーム**\n\n```tsx\n\"use client\";\n\nimport { Post } from \"@/lib/types\";\nimport Link from \"next/link\";\nimport { redirect } from \"next/navigation\";\n\nexport const EditForm = ({ post }: { post: Post }) => {\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const formData = new FormData(e.currentTarget);\n    const title = formData.get(\"title\") as string;\n    const content = formData.get(\"content\") as string;\n\n    const res = await fetch(`http://localhost:3001/api/v1/posts/${post.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        title: title,\n        content: content,\n      }),\n    });\n\n    if (res.ok) {\n      redirect(`/posts/${post.id}`);\n    } else {\n      alert(\"Failed to update post\");\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 flex flex-col items-center\">\n      <div className=\"w-full max-w-2xl\">\n        <h1 className=\"text-3xl font-bold mb-6\">ブログ編集</h1>\n\n        <form className=\"w-full\" onSubmit={handleSubmit}>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n              タイトル\n            </label>\n            <input\n              name=\"title\"\n              type=\"text\"\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              defaultValue={post.title}\n            />\n          </div>\n\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n              本文\n            </label>\n            <textarea\n              name=\"content\"\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              defaultValue={post.content}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              更新\n            </button>\n            <Link\n              href={`/posts/${post.id}`}\n              className=\"text-blue-500 hover:text-blue-700\"\n            >\n              キャンセル\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n```\n",
    "createdAt": "2025-07-09T03:20:03.308Z",
    "updatedAt": "2025-07-09T03:20:03.308Z"
  },
  {
    "title": "PCA解説",
    "summary": "PCAを一からまとめました！",
    "tags": [
      "PCA",
      "AI",
      "Machine Learning"
    ],
    "slug": "Generative-AI/PCA-explanation",
    "folder": "Generative-AI",
    "content": "\n# 教師なし学習とは\n\n---\n\n## 教師あり学習と比較\n\n1. 目的変数がない、入力データそのものに注目\n2. データの中に部分集合を見つけたり、データを変換して別の形式で表現したりすることでデータの解釈性を高める\n3. データに潜むパターンや示唆を見出すために用いる\n4. 教師なし学習モデルはクラスタリング、次元削減に大別できる\n\n## データサイエンスのプロセス\n\nOSEMN (オーサム) Process\n\n![](https://miro.medium.com/v2/resize:fit:828/format:webp/1*eE8DP4biqtaIK3aIy1S2zA.png)\n\n[5 Steps of a Data Science Project Lifecycle](https://towardsdatascience.com/5-steps-of-a-data-science-project-lifecycle-26c50372b492)\n\n### OBTAIN (データの取得)\n\nデータを取得する。データは主にデータベース、`CSV`, `Web API`から取得できる\n\n### SCRUB\n\nデータを解釈するために整理する。\n\nデータには欠損値や、モデルに使用できない型になっているデータが存在する。また、(リレーショナル)データベースでは複数のテーブルが混在しており、データ分析がしにくい。列を分割、あるいは結合する必要がある。\n\npythonでは主に`pandas`を使う。\n\n### EXPLORE (データの探索)\n\nモデルに使うためのデータを探す。**機械なし学習はここで役立つ**。またpythonでは、`matplotlib`を用いてデータの可視化も行う。\n\nここではデータのメタ的な理解が必要。そのための探索、特徴量エンジニアリングを行う。\n\n### MODEL\n\n将来を予測するために**教師あり学習**を用いて機械学習モデルを作る。\n\n### INTERPRET\n\nデータを利用して価値を創出する。(稼ぐ)\n\n# PCAとは\n\n---\n\nPCA: Principal Component Analysis (主成分分析)\n\n## 次元削減\n\nより少ない特徴量でデータを理解するための手法。多変数データを特徴を保ちながら少変数で表現すること。\n\n機械学習において、特徴量は多すぎないほうが良い。データの解釈性を失う恐れがあるし、過学習が起こりやすい。さらに、処理スピードも遅くなる。それらを解決するために「特徴量を減らす=次元削減をする」\n\n## PCA概要\n\n変数間に相関のあるデータに対して有効。代表的な次元削減の手法。\n\n元データの変数から新たな変数を構成する。\nたいていの場合3次元以内に収める\n\n以下のサイトで視覚的に理解できる\n\n[Principal Component Analysis explained visually](https://setosa.io/ev/principal-component-analysis/)\n\n![a](https://newsatcl-pctr.c.yimg.jp/t/amd-img/20200202-00010000-wordleaf-000-8-view.jpg?pri=l&w=640&h=640&exp=10800&fmt=webp)\n\n## アルゴリズム\n\n### やること\n\n主成分における内積の分散が最大となるような主成分軸を見つける→基底変換\n\n→基底を変換したいので変換行列が必要、最適な変換行列を求める\n\n![output.png](output.png)\n\n$$\ni番目のp次元ベクトルx_{i*}が(x_{i1},x_{i2},...,x_{ip})^Tのとき\n$$\n\n$$\nデータXを、\\mathbf X=\\begin{pmatrix}\nx_{11}&x_{12}&...&x_{1p}\\\\\nx_{21}&x_{22}&...&x_{2p}\\\\\n\\vdots&\\vdots&\\ddots&\\vdots&\\\\\nx_{n1}&x_{n2}&...&x_{np}\n\\end{pmatrix},\\quad\n\np次元からq次元に変換する変換行列を\\mathbf w=\\begin{pmatrix}\nw_{11}&w_{12}&...&w_{1q}\\\\\nw_{21}&w_{22}&...&w_{2q}\\\\\n\\vdots&\\vdots&\\ddots&\\vdots&\\\\\nw_{p1}&w_{p2}&...&w_{pq}\n\\end{pmatrix}とする。\n$$\n\n> 変換行列のそれぞれの列は基底ベクトルを表す\n\n$$\nこのとき、圧縮されたデータを\\mathbf Yとすると、\\mathbf Y=\\mathbf X\\mathbf wが成り立つ。次に、射影後のベクトルについて考える。\n$$\n\n$$\n元のデータベクトルx_{i*}を求めたい主成分の方向に射影した結果をy_i、この時の主成分をw=(w_1,w_2,...,w_p)^Tとすると、y_i=w^Tx_{i*}と表せる。\n$$\n\n![](https://math-negi.jp/wp-content/uploads/2021/10/20211028214521.png)\n\n> ベクトルの方向が近ければ近いほど、内積は大きくなる。その分内積の値のズレも大きくなる→その方向における内積の分散の最大値を求めれば主成分が決まるのでは？\n\n$$\nこのとき、分散s^2=\\frac{1}{n}\\sum_{i=1}^n(y_i-\\overline y)^2,\\quad 平均\\overline y=\\frac{1}{n}\\sum_{i=1}^ny_i=w_1\\overline {x_{*1}}+w_2\\overline {x_{*2}}+...+w_p\\overline {x_{*p}}=w^T(\\overline{x_{*1}},\\overline{x_{*2}},...,\\overline{x_{*p}})となるので、\\\\\n\ns^2=\\frac{1}{n}\\sum_{i=1}^n(w^T(x_{i1},x_{i2},...,x_{ip})-w^T(\\overline{x_{*1}},\\overline{x_{*2}},...,\\overline{x_{*p}}))^2\\\\=\n\n\\frac{1}{n}\\sum_{i=1}^n \\left\\{w\n\\begin{pmatrix}\nx_{i1}-\\overline{x_{*1}}\\\\\nx_{i2}-\\overline{x_{*2}}\\\\\n\\vdots\\\\\nx_{ip}-\\overline{x_{*p}}\n\\end{pmatrix}\\right\\}^2=\n\n\\frac{1}{n}\\sum_{i=1}^n w^T\n\\begin{pmatrix}\nx_{i1}-\\overline{x_{*1}}\\\\\nx_{i2}-\\overline{x_{*2}}\\\\\n\\vdots\\\\\nx_{ip}-\\overline{x_{*p}}\n\\end{pmatrix}\n\\begin{pmatrix}\nx_{i1}-\\overline{x_{*1}}\\\\\nx_{i2}-\\overline{x_{*2}}\\\\\n\\vdots\\\\\nx_{ip}-\\overline{x_{*p}}\n\\end{pmatrix}^Tw=\n\n w^T\n\\frac{1}{n}\\sum_{i=1}^n\n\\begin{pmatrix}\nx_{i1}-\\overline{x_{*1}}\\\\\nx_{i2}-\\overline{x_{*2}}\\\\\n\\vdots\\\\\nx_{ip}-\\overline{x_{*p}}\n\\end{pmatrix}\n\\begin{pmatrix}\nx_{i1}-\\overline{x_{*1}}\\\\\nx_{i2}-\\overline{x_{*2}}\\\\\n\\vdots\\\\\nx_{ip}-\\overline{x_{*p}}\n\\end{pmatrix}^Tw\n\n=w^TSw\\\\\n\n※共分散行列S=\\begin{pmatrix}\ns_{11}&s_{12}&...&s_{1p}\\\\\ns_{21}&s_{22}&...&s_{2p}\\\\\n\\vdots&\\vdots&\\ddots&\\vdots&\\\\\ns_{p1}&s_{p2}&...&s_{pp}\n\\end{pmatrix},\\quad s_{jk}=\\frac{1}{n}\\sum_{i=1}^n(x_{ij}-\\overline{x_{*j}})(x_{ik}-\\overline{x_{*k}})\n$$\n\n$$\nここでs^2=w^TSw\\quad (w^Tw=1)が最大値を取るときのwをラグランジュの未定乗数法で求める。\\\\\nf(w)=s^2=w^TSw,\\quad 制約：g(w)=w^Tw-1=0\\quad のもとで、ラグランジュ関数はF(w,\\lambda)=f(w)+\\lambda g(w)となる。\\\\(wはいくらでも大きくできてしまうので制約が必要)\n$$\n\n[ラグランジュの未定乗数法と例題 | 高校数学の美しい物語](https://manabitimes.jp/math/879)\n\n$$\ns^2が最大化するとき \\frac{\\partial}{\\partial w}F(w,\\lambda)=2Sw-2\\lambda w=0より、Sw=\\lambda w\n$$\n\n$$\nSw=\\lambda wは共分散行列の固有方程式を表している。ちなみに両辺にw^Tをかけると、w^TSw=w^T\\lambda w,\\quad 式変形していくと仮定よりw^TSw=\\lambda w^Tw=\\lambda=s^2\n$$\n\n$$\nしたがって固有値\\lambdaは分散そのものを表す。\\\\また、それぞれに対する固有ベクトルwは変換後の基底=主成分であり、求めたい変換行列\\mathbf wは\\begin{pmatrix}w_1&w_2&...&w_q\\end{pmatrix}となる。\n$$\n\n## 寄付率\n\n各成分ごとに計算される固有値を固有値の総和で割ると、主成分の重要度の割合で表現することができる。この時の割合を寄付率といい、各主成分がデータをどれぐらい説明しているかを表現している。\n\n$$\n第k主成分の寄付率=\\frac{\\lambda_k}{\\sum_{i=1}^n\\lambda_i}\n$$\n\n# pythonで実装してみる\n\n---\n\n## データを作る\n\n次に示すプログラムは、`RandomState`オブジェクトを使って、2変数のデータセットを生成し、各変数について標準化したものをプロットしたものである。\n\n```py\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport scipy as sp\nimport matplotlib.pyplot as plt\n\n# RandomStateオブジェクトを作成\nsample = np.random.RandomState(1)\n\n#２つの乱数を生成\nX = np.dot(sample.rand(2, 2), sample.randn(2, 200)).T\n\n# 標準化 (平均0, 分散1にする)\nsc = StandardScaler()\nX_std = sc.fit_transform(X)\n\n# 相関係数の算出とグラフ化\nprint('相関係数{:.3f}:'.format(sp.stats.pearsonr(X_std[:, 0], X_std[:, 1])[0]))\nplt.scatter(X_std[:, 0], X_std[:, 1])\n```\n\n## 主成分分析の実行\n\n```py\n# インポート\nfrom sklearn.decomposition import PCA\n\n# 主成分分析\npca = PCA(n_components=2) # 2次元に圧縮\npca.fit(X_std)\n```\n\n## 学習結果の確認\n\n### `components_`属性\n\n変換行列(固有ベクトル)を出力する\n\n```py\nprint(pca.components_)\n```\n\n### `explained_variance_`属性\n\n分散(固有値)を出力する\n\n```py\nprint('各主成分の分散:{}'.format(pca.explained_variance_))\n```\n\n## 結果を図示する\n\n```py\n# パラメータ設定\narrowprops=dict(arrowstyle='->',\n                linewidth=2,\n                shrinkA=0, shrinkB=0)\n\n# 矢印を描くための関数\ndef draw_vector(v0, v1): # v0: 先端, v1: 終端\n    plt.gca().annotate('', v1, v0, arrowprops=arrowprops)\n\n# 元のデータをプロット\nplt.scatter(X_std[:, 0], X_std[:, 1], alpha=0.2)\n\n# 主成分分析の2軸を矢印で表示する\nfor length, vector in zip(pca.explained_variance_, pca.components_): # zip(): forループの中で複数のリストを同時に取り出す\n    v = vector * 3 * np.sqrt(length)\n    draw_vector(pca.mean_, pca.mean_ + v) # 重心を起点とする\n\nplt.axis('equal')\n```\n\n# PCAを用いた乳がん患者予測\n\n---\n\n## ライブラリインポート\n\n```py\n# 乳がんデータを読み込むためのインポート\nfrom sklearn.datasets import load_breast_cancer\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n%matplotlib inline\n```\n\n## 乳がんデータの取得\n\n```py\n# 乳がんデータの取得\ncancer = load_breast_cancer()\ncancer\n```\n\n## pandas dataframeで整理\n\n```py\ndf = pd.DataFrame(cancer.data, columns=cancer.feature_names)\ndf[\"target\"] = cancer.target\ndf\n```\n\n欠損値などはありませんでした。\n\n## 説明変数と目的変数の関係をヒストグラムにしてみる\n\n### データをmalignant (悪性)かbenign (良性)に分けるためのフィルター処理\n\n```py\nmalignant = df[df[\"target\"] == 0]\nbenign = df[df[\"target\"] == 1]\n```\n\n### 30個のヒストグラムを作る\n\n```py\n#　malignant（悪性）がブルー、benign（良性）がオレンジのヒストグラム\n# 各図は、各々の説明変数（mean radiusなど）と目的変数との関係を示したヒストグラム\nfig, axes = plt.subplots(6,5,figsize=(20,20))\nax = axes.ravel()\nfor i, column in enumerate(df.columns[:-1]):\n    _,bins = np.histogram(df[column], bins=50)\n    ax[i].hist(malignant[column], bins, alpha=.5)\n    ax[i].hist(benign[column], bins, alpha=.5)\n    ax[i].set_title(column)\n    ax[i].set_yticks(())\n\n# ラベルの設定\nax[0].set_ylabel('Count')\nax[0].legend(['malignant','benign'],loc='best')\nfig.tight_layout()\n```\n\nしかし特徴的なデータは見当たらないので、主成分分析を用いて次元削減を行ってみる\n\n## PCAで次元削減\n\n```py\n# 標準化\nsc = StandardScaler()\nX_std = sc.fit_transform(cancer.data)\n\n# 主成分分析\npca = PCA(n_components=2)\npca.fit(X_std)\nX_pca = pca.transform(X_std)\n\n# 表示\nprint('X_pca shape:{}'.format(X_pca.shape))\nprint('Explained variance ratio:{}'.format(pca.explained_variance_ratio_))\n```\n\nX_pcaは569行2列に変換された→569個の二次元ベクトルの集合\n\n## 圧縮データの可視化\n\n### DF作成\n\n```py\n# 列にラベルをつける、1つ目が第1主成分、2つ目が第2主成分\nX_pca = pd.DataFrame(X_pca, columns=['pc1','pc2'])\n\n# 上のデータに、目的変数（cancer.target）を紐づける、横に結合\nX_pca = pd.concat([X_pca, pd.DataFrame(cancer.target, columns=['target'])], axis=1)\n\n# 悪性、良性を分ける\npca_malignant = X_pca[X_pca['target']==0]\npca_benign = X_pca[X_pca['target']==1]\n```\n\n### 可視化\n\n```py\n# 悪性をプロット\nax = pca_malignant.plot.scatter(x='pc1', y='pc2', color='red', label='malignant');\n\n# 良性をプロット\npca_benign.plot.scatter(x='pc1', y='pc2', color='blue', label='benign', ax=ax);\n\n# おおよその境界線\nx = np.arange(-5, 9)\ny = 1.7 * x - 0.8\nax.plot(x, y, color=\"black\")\n```\n\n境界線は`SVM`を使うとより最適化できるかも\n\n# 補足\n\n---\n\n## 主成分の選び方\n\n累計寄付率を求めてみると、次元が大きくなるほど値は変化しなくなる。なくなるぐらいの次元がベスト。逆に次元が大きくなるほど累計寄付率が大きく変わる場合、それは相関関係があるとは言えない。PCRを使ってもあまり意味がない。\n\n## 注意点\n\n### 解釈の難しさ\n\n主成分分析を用いて得られる結果は、統計的な指標や数値情報である。しかし、見つかった主成分が具体的にどのような意味を持つのかは、分析者の解釈に委ねられ、直感的には理解しづらい場合がある。その理由は、主成分自体が元のデータと直接の関連を持たないためである。\n\n### 正規性の仮定\n\n主成分分析は、データが正規分布に従っているという仮定の元に成り立っている分析手法である。正規分布とは、平均値の周りにデータが集中し、左右対称の釣鐘状にデータが広がるような分布をさす。正規性の仮定を満たさないデータに主成分分析を適用すると、主成分の方向や寄与率が歪められる可能性がある。\n\n### 外れ値の影響\n\n外れ値は通常のデータパターンから大きく逸脱した値であり、分析結果に悪影響を及ぼす可能性がある。**主成分分析はデータの分散を最大化する方向を求める手法である**。そのため、外れ値が分散に大きく影響すると、主成分の方向や寄与率が歪められてしまう。これにより、分析結果が歪んだり、軸の解釈が困難になってしまう問題が発生する。\n",
    "createdAt": "2025-07-11T13:23:19.958Z",
    "updatedAt": "2025-07-11T13:23:19.958Z"
  },
  {
    "title": "Radix UIのdropdown menuを開くとscrollbarが消えてスタイルが変わるときの対処法",
    "summary": "記事がなかったので作る",
    "tags": [
      "Next.js",
      "Web",
      "Webアプリ開発",
      "shadcn/ui",
      "CSS"
    ],
    "slug": "Next.js/redix-dropdown-error",
    "folder": "Next.js",
    "content": "\nRadix UIのdropdown menuを開くときに，スクロールバーが消えてスタイルが変わってしまうことがあった．見栄えが悪いので修正しようとしたが記事がなく，修正に手間取ったのでここに修正方法を記す．\n\n該当のコードは以下の通り．\n\n```tsx\n\"use client\";\nimport { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport const ThemeToggle = ({ children }: { children: React.ReactNode }) => {\n  const { setTheme } = useTheme();\n\n  return (\n    <>\n      {children}\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"\n              fixed bottom-8 right-8 \n              dark:text-gray-800 text-gray-200\n              hover:dark:text-gray-700 hover:text-gray-200\n              dark:bg-white bg-black\n              hover:dark:bg-gray-100 hover:bg-gray-950\n              dark:border-white border-black\n            \"\n          >\n            <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n            <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            <span className=\"sr-only\">Toggle theme</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          align=\"end\"\n          className=\"\n            dark:text-gray-800 text-gray-200\n            hover:dark:text-gray-700 hover:text-gray-200\n            dark:bg-white bg-black\n            hover:dark:bg-gray-100 hover:bg-gray-950\n            border-none\n          \"\n        >\n          <DropdownMenuItem\n            className=\"dark:hover:bg-gray-300 dark:hover:text-black\"\n            onClick={() => setTheme(\"light\")}\n          >\n            Light\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            className=\"dark:hover:bg-gray-300 dark:hover:text-black\"\n            onClick={() => setTheme(\"dark\")}\n          >\n            Dark\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            className=\"dark:hover:bg-gray-300 dark:hover:text-black\"\n            onClick={() => setTheme(\"system\")}\n          >\n            System\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n};\n```\n\nボタン要素が`fixed`だからおかしくなったのかなとは思うが`fixed`は使わざるを得ない．ちなみにレスポンシブでは同様のバグは発生しなかった．もちろんスクロールバーが出ない状態でも発生はしない．\n\n修正方法は以下の通り．`grobals.css`にこれを追加するだけ．\n\n```css\nbody[data-scroll-locked][data-scroll-locked] {\n  overflow: auto !important;\n  margin-right: 0 !important;\n}\n```\n\n`data-scroll-locked`属性が2回付与された`body`要素に対して適用している．おそらくJSによってdata-scroll-lockedをbodyに付与することでスクロールを無効化しており，dropdown menuにその機能があったのではないかと推測している．\n\n`[data-scroll-locked][data-scroll-locked]`のように2回付与された場合しか適用できなかった．\n\nそしてこの時に`overflow: auto !important;`と`margin-right: 0 !important;`を指定している．\n\n前者は要素がオーバーフローをしたときにスクロールバーを表示させるようにしているが，`!important`によってそれを優先的に適用させている．\n\nこのときになぜかbodyに`margin-right: 16px !important`が付与されるため，後者のように指定することでそれを無効化している．\n\n参考\n[shadcn/radix ui scrollbar removal bug](https://www.reddit.com/r/reactjs/comments/1fjcwkh/shadcnradix_ui_scrollbar_removal_bug/?rdt=60694)\n",
    "createdAt": "2025-07-09T03:20:03.308Z",
    "updatedAt": "2025-07-09T03:20:03.308Z"
  },
  {
    "title": "Ruby on RailsでPostgreSQLに接続する",
    "summary": "忘れたとき用のメモ",
    "tags": [
      "Ruby on Rails",
      "PostgreSQL"
    ],
    "slug": "ruby/ror-psql",
    "folder": "ruby",
    "content": "\n# プロジェクトを作る\n\n```bash\nrails new new_app -d postgresql\n```\n\n> api開発の場合は`--api`オプションをつける\n\n`rails db:create`を忘れずに\n\n## Gemfileの編集\n\ndbに入るためのパスワードを安全に設定するために，`dotenv-rails`を入れておく\n\n```ruby\n# Gemfile\ngroup :development, :test do\n  # See https://guides.rubyonrails.org/debugging_rails_applications.html#debugging-with-the-debug-gem\n  gem \"debug\", platforms: %i[ mri mswin mswin64 mingw x64_mingw ], require: \"debug/prelude\"\n\n  # Static analysis for security vulnerabilities [https://brakemanscanner.org/]\n  gem \"brakeman\", require: false\n\n  # Omakase Ruby styling [https://github.com/rails/rubocop-rails-omakase/]\n  gem \"rubocop-rails-omakase\", require: false\n\n  gem 'dotenv-rails'\nend\n```\n\n# db設定ファイルの編集\n\n```yml\n# config/database.yml\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n  pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n\ndevelopment:\n  <<: *default\n  database: sticky_backend_development\n\n  username: postgres\n\n  password: <%= ENV['DATABASE_PASSWORD'] %>\n\ntest:\n  <<: *default\n  database: sticky_backend_test\n  username: postgres\n  password: <%= ENV['DATABASE_PASSWORD'] %>\n\nproduction:\n  <<: *default\n  database: sticky_backend_production\n  username: postgres\n  password: <%= ENV['DATABASE_PASSWORD'] %>\n```\n\n> .envファイルに`DATABASE_PASSWORD`を設定する\n\n> 最後に`rails db:create && rails db:migrate`を忘れずに！\n",
    "createdAt": "2025-07-11T15:10:45.976Z",
    "updatedAt": "2025-07-11T15:11:37.726Z"
  },
  {
    "title": "shadcn/uiでdarkmodeに切り替えるときのHydration errorを解決する方法",
    "summary": "参考にした記事をただ紹介するだけ",
    "tags": [
      "Next.js",
      "Web",
      "Webアプリ開発",
      "個人開発",
      "shadcn/ui"
    ],
    "slug": "Next.js/shadcn-darkmode-hydration",
    "folder": "Next.js",
    "content": "\n`theme-provider.tsx`を\n\n```tsx\n\"use client\";\n\nimport { ThemeProvider as NextThemeProvider } from \"next-themes\";\nimport { type ThemeProviderProps } from \"next-themes/dist/types\";\nimport { useEffect, useState } from \"react\";\n\nexport const ThemeProvider = ({ children, ...props }: ThemeProviderProps) => {\n  const [mounted, setMounted] = useState<boolean>(false);\n  useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n  return (\n    mounted && <NextThemeProvider {...props}>{children}</NextThemeProvider>\n  );\n};\n```\n\nのようにすればよいらしい．このようにしたら治った．\n\n参考\n[DarkMode切替時でのHydration errorの対応策](https://zenn.dev/dk_/articles/dd9b0426e58f7d)\n",
    "createdAt": "2025-07-11T13:23:19.958Z",
    "updatedAt": "2025-07-11T13:23:19.958Z"
  },
  {
    "title": "The Basics of Neural Networks",
    "summary": "I explain neural networks without using confusing metaphors.",
    "tags": [
      "python",
      "Machine Learning",
      "Deep Learning",
      "Algorithm",
      "Neural Network"
    ],
    "slug": "Deep-Learning/NN-basics",
    "folder": "Deep-Learning",
    "content": "\n# Neural Networks\n\n---\n\nA neural network is similar to a function. However, it uses high-dimensional input values to output desired data. It can approximate very complex functions. A disadvantage is that it requires \"learning\" and lacks interpretability in its computation process.\n\n## Structure\n\n![Neural Network Structure](https://www.tel.co.jp/museum/magazine/communication/160229_report01_02/img/img_report01_03.jpg)\n\n### Input Layer\n\n$$\n\\mathbf x=[x_1,x_2,...,x_n]\\in\\mathbb R^n\n$$\n\n### Hidden Layers\n\n$$\n\\mathbf h_i=f_i(\\mathbf W_i\\mathbf h_{i-1}+\\mathbf b_i)\\quad\n\\left\\{\n\\begin{aligned}\nf_i&:\\mathbb R^{m_{i-1}}\\to\\mathbb R^{m_i}\\quad(\\text{activation function})\\\\\n\\mathbf W_i&\\in\\mathbb R^{m_i\\times m_{i-1}}\\quad(\\text{weight vector})\\\\\n\\mathbf h_i,\\mathbf b_i&\\in\\mathbb R^{m_i}\\quad(\\text{output and bias vector of layer } i)\n\\end{aligned}\n\\right.\n$$\n\n### Output Layer\n\n$$\n\\mathbf y=f_{out}(\\mathbf W_{out}\\mathbf h_{last}+\\mathbf b_{out})\n$$\n\n### Overall Function\n\n$$\n\\hat{\\mathbf y}=f_{NN}(x;\\theta)=f_{out}\\circ f_n\\circ f_{n-1}\\circ...\\circ f_1(\\mathbf W_1\\mathbf x+\\mathbf b_1)\n$$\n\nHere, \\( \\theta \\) represents the parameters, including \\( f \\), \\( W \\), \\( h \\), and \\( b \\).\n\n## Activation Functions\n\nActivation functions introduce non-linearity.\n\n### ReLU (Rectified Linear Unit)\n\n$$\nf(x)=\\max(0,x)\n$$\n\n### Sigmoid\n\n$$\nf(x)=\\frac{1}{1+\\exp(-x)}\n$$\n\n### Tanh\n\n$$\nf(x)=\\tanh(x)=\\frac{e^x-e^{-x}}{e^x+e^{-x}}\n$$\n\n### SoftPlus\n\nThe integral of the sigmoid function:\n\n$$\nf(x)=\\log(1+\\exp(x))\n$$\n\n## Learning Process\n\n### Forward Propagation\n\nThe calculation process from input to output:\n\n$$\n\\hat{\\mathbf y}=f_{NN}(x;\\theta)=f_{out}\\circ f_n\\circ f_{n-1}\\circ...\\circ f_1(\\mathbf W_1\\mathbf x+\\mathbf b_1)\n$$\n\n### Loss Function Calculation\n\nThe process of calculating the error using a loss function based on the output and target data. Examples include Mean Squared Error (MSE) and Cross-Entropy Loss.\n\n$$\n{\\cal L}=Loss(\\mathbf y,\\hat{\\mathbf y})\n$$\n\n### Backpropagation\n\nThe process of updating parameters based on the error using gradient descent.\n\n$$\n\\mathbf W_i\\leftarrow\\mathbf W_i-\\eta\\frac{\\partial{\\cal L}}{\\partial\\mathbf W_i},\\quad\\mathbf b_i\\leftarrow\\mathbf b_i-\\eta\\frac{\\partial{\\cal L}}{\\partial\\mathbf b_i}\\quad\n\\left\\{\n\\begin{aligned}\n&\\frac{\\partial{\\cal L}}{\\partial\\mathbf W_i}=\\frac{\\partial{\\cal L}}{\\partial\\hat{\\mathbf y}}\\cdot\\frac{\\partial\\hat{\\mathbf y}}{\\partial\\mathbf h_i}\\cdot\\frac{\\partial\\mathbf h_i}{\\partial\\mathbf W_i}\\\\\n&\\frac{\\partial{\\cal L}}{\\partial\\mathbf b_i}=\\frac{\\partial{\\cal L}}{\\partial\\hat{\\mathbf y}}\\cdot\\frac{\\partial\\hat{\\mathbf y}}{\\partial\\mathbf h_i}\\cdot\\frac{\\partial\\mathbf h_i}{\\partial\\mathbf b_i}\n\\end{aligned}\n\\right.\n$$\n\nThis process ensures the gradients guide the parameters toward lower error values. It allows for efficient updates, especially when far from the minimum.\n\n> 💡 The reason \\( f'(x)=0 \\) is not directly computed is that it is computationally difficult for computers. Instead, gradient descent is used since it is easier to compute the derivative numerically.\n\n[Why Use Gradient Descent in Machine Learning](https://www.tomotaku.com/machine-learning-gradient-descent/)\n\n## Optimization Algorithms\n\n### Standard Gradient Descent\n\n$$\n\\theta_{t+1}=\\theta_t-\\eta\\nabla_\\theta{\\cal L}(\\theta_t)\n\\left\\{\n\\begin{aligned}\n\\theta_t:&\\text{parameters at time } t\\\\\n\\eta:&\\text{learning rate}\\\\\n\\nabla_\\theta{\\cal L}(\\theta_t):&\\text{gradient of the loss function at time } t\n\\end{aligned}\n\\right.\n$$\n\nStop when $||\\nabla_\\theta{\\cal}(\\theta_t)||<\\epsilon$, or use another stopping criterion.\n\n### Adam\n\nAdam is more suited to deep learning, as it converges faster than standard gradient descent.\n\n1. Compute the first moment: the moving average of the gradients (using exponential smoothing).\n\n   $$\n   m_t=\\beta_1m_{t-1}+(1-\\beta_1)\\nabla_\\theta{\\cal L}(\\theta_t)\n   $$\n\n2. Compute the second moment: the moving average of the squared gradients.\n\n   $$\n   v_t=\\beta_2v_{t-1}+(1-\\beta_2)(\\nabla_\\theta{\\cal L}(\\theta_t))^2\n   $$\n\n3. Bias correction:\n\n   $$\n   \\hat m_t=\\frac{m_t}{1-\\beta_1^t},~\\hat v_t=\\frac{v_t}{1-\\beta_2^t}\n   $$\n\n4. Update parameters:\n\n   $$\n   \\theta_{t+1}=\\theta_t-\\eta\\frac{\\hat m_t}{\\sqrt{\\hat v_t}+\\epsilon}\n   $$\n",
    "createdAt": "2025-07-11T13:23:19.958Z",
    "updatedAt": "2025-07-11T13:23:19.958Z"
  },
  {
    "title": "Understanding XGBoost",
    "summary": "I explained XGBoost in a university lecture!",
    "tags": [
      "AI",
      "Machine Learning",
      "Mathematics",
      "Explanation"
    ],
    "slug": "Machine-Learning/understanding-XGBoost",
    "folder": "Machine-Learning",
    "content": "\n# Introduction to XGBoost\n\n## Overview of XGBoost (eXtreme Gradient Boosting)\n\n- An ensemble learning method combining boosting and decision trees.\n- **Boosting**: A technique that iteratively creates weak models (weak learners), with each subsequent learner correcting the errors of the previous one, thereby improving performance.\n- Shallow decision trees are created, each of which performs well only on a portion of the data. Boosting improves their overall performance.\n- Although sensitive to parameter tuning, XGBoost can outperform Random Forest when configured correctly.\n- Despite the term \"regression tree,\" it can be used for both regression and classification tasks.\n\n---\n\n## Review: Decision Trees\n\nA method that learns conditional branching, often illustrated by games like Akinator.\n\n### Prerequisite Knowledge\n\n#### Information\n\nThe less frequent (rarer) an event, the greater its \"information content\":\n\n$$\ni(x) = -\\log_2 p(x)\n$$\n\n#### Impurity\n\n- **Entropy (Average Information Content)**  \n  A measure of randomness or disorder. It uses the expected value of information content based on occurrence probabilities:\n\n  $$\n  I_H(t) = -\\sum_{i=1}^c p(i|t) \\log_2 p(i|t) \\quad \\left(p(i|t) = \\frac{n_i}{N}: \\text{Probability of class } i \\text{ at node } t\\right)\n  $$\n\n- **Gini Impurity**  \n  Borrowed from econometrics:\n\n  $$\n  I_G(t) = 1 - \\sum_{i=1}^c p(i|t)^2\n  $$\n\n  A higher value indicates more mixed classes, i.e., **higher impurity** → poor classification. Other metrics like misclassification rate can also be used.\n\n#### Gain\n\nThe difference in impurity between nodes before and after splitting. Higher gain indicates a greater reduction in impurity.\n\n##### Decision Tree Learning Using Gain\n\n1. For each feature, consider the midpoints of adjacent data points as threshold candidates.\n2. Compute the impurity after splitting at each candidate threshold.\n3. Split at the threshold that reduces impurity the most.\n4. Repeat recursively.\n5. Stop when a node contains too few data points or further splitting is not possible.\n\n$$\n\\Delta I_H(t) = I_H(t_B) - \\sum_{i=1}^b w_i I_{H_i}(t_{A_i})\n$$\n\n$$\n\\left(I_H(t_B): \\text{Impurity before branching, } \\sum_{i=1}^b w_i I_H(t_{A_i}): \\text{Weighted average impurity after branching}\\right)\n$$\n\n---\n\n# Ensemble Methods for Improved Generalization Performance\n\n**Ensemble Methods** combine multiple machine learning models to achieve better predictive performance than any single model.\n\nBy integrating predictions from different models, ensemble methods compensate for individual weaknesses, improving overall predictive accuracy and generalization performance.\n\n### Generalization Performance\n\nIndicates a model's ability to make accurate predictions on unseen data, not just the training data.\n\n#### Overfitting\n\n- A phenomenon where the model performs well on training data but poorly on test data.\n- Occurs when the model \"memorizes\" the training data, becoming unable to generalize to new data.\n- Analogous to scoring high on regular tests but poorly on mock or entrance exams.\n\n#### Weak Learners\n\nModels with low predictive accuracy that are prone to overfitting, such as shallow decision trees.\n\nFor example, if a model is trained to identify cats as animals with pointy ears, it might fail to recognize cats with rounded ears.\n\n#### Strong Learners\n\nModels with higher predictive accuracy than weak learners. Boosting transforms weak learners into a single strong learner system.\n\nFor instance, to identify cats, a weak learner that predicts based on pointy ears can be combined with another that identifies eye shape. By refining predictions iteratively, the overall system improves accuracy.\n\n---\n\n## Bagging\n\nAn ensemble technique designed to address overfitting. Multiple weak learners are created, and their predictions are aggregated using majority voting (for classification) or averaging (for regression) to enhance generalization performance.\n\n### Examples\n\n- RandomForest\n- BaggingClassifier/Regressor\n\n---\n\n## Boosting\n\n- Combines multiple weak learners.\n- Adjusts the weights of data points so that subsequent models focus more on previously misclassified points.\n- Each model reduces errors iteratively.\n\n### Examples of Boosting Models\n\n#### AdaBoost\n\nA general boosting method. Repeatedly creates weak learners, emphasizing misclassified points by adjusting their weights. Final predictions are made using a weighted majority vote of all weak learners.\n\n#### GBDT (Gradient Boosting Decision Tree)\n\nMinimizes the error between predicted values and true labels iteratively, gradually transforming weak learners into strong learners. The final model's output is the combined prediction of all learners.\n\n#### XGBoost (eXtreme Gradient Boosting)\n\nAn enhanced version of GBDT with features like regularization and parallel computation for improved performance.\n\n# Ensemble Methods Usage Guide\n\n| Ensemble Method | Model Examples              | Use Cases                                                                                                  | Priority                                             |\n| :-------------- | :-------------------------- | :--------------------------------------------------------------------------------------------------------- | :--------------------------------------------------- |\n| Bagging         | RandomForest                | When avoiding overfitting and at the initial stage of a project where useful features are not well-defined | First choice for bagging                             |\n|                 | BaggingClassifier/Regressor |                                                                                                            | For non-decision-tree models                         |\n| Boosting        | XGBoost, GradientBoosting   | When aiming for high accuracy, typically after EDA reveals useful features                                 | Often the first choice due to overfitting prevention |\n|                 | AdaBoost                    |                                                                                                            | For non-decision-tree models                         |\n| No Ensemble     | Single Model                | When interpretability of results is critical                                                               |                                                      |\n\n# Theory Behind XGBoost\n\n## AdaBoost\n\nA drawback of decision trees is that they can overfit or underfit if tree size is incorrectly chosen, making them a sensitive model.\n\n- **Idea**: Instead of building the entire tree at once, why not incrementally grow it?\n- Use a combination of weak learners.\n- Assign higher weights to misclassified data and lower weights to correctly classified data after each iteration.\n- Combine all nodes to create a robust tree.\n\n**Reference**: [Ensembles (4): AdaBoost](https://www.youtube.com/watch?v=ix6IvwbVpw0)\n\n## Gradient Boosting Decision Trees (GBDT)\n\n### Issues with AdaBoost\n\n1. Assigning high weights to misclassified data can also amplify noise, potentially causing overfitting.\n2. Simply adjusting weights without leveraging a loss function does not explicitly solve a minimization problem, which may not be optimal.\n\n### GBDT's Approach\n\nGBDT explicitly defines a loss function and solves its minimization problem.\n\n#### Key Concepts\n\n- **Loss Function**: Measures prediction error (e.g., Mean Squared Error or Cross-Entropy Loss).\n  $$\n  \\mathcal{L}(y, \\hat{y}) = \\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y})^2\n  $$\n- **Gradient Descent**: Optimizes model parameters by minimizing the loss.\n  $$\n  \\theta^* = \\arg\\min_{\\theta} \\mathcal{L}(y, f_{\\theta}(\\mathbf{x})) \\equiv \\theta - \\eta \\frac{\\partial \\mathcal{L}(y, f_\\theta(\\mathbf{x}))}{\\partial \\theta}\n  $$\n\n#### Procedure\n\n1. Initialize predictions with a constant that minimizes the loss:\n   $$\n   F_0(\\mathbf{x}) = \\arg\\min_{\\hat{y}_0} \\sum_{i=1}^n \\mathcal{L}(y_i, \\hat{y}_0)\n   $$\n   For MSE:\n   $$\n   \\hat{y}_0 = \\frac{1}{n} \\sum_{i=1}^n y_i\n   $$\n2. Iteratively improve predictions:\n   - Compute residuals (errors):\n     $$\n     \\tilde{y}_0 = -\\frac{\\partial \\mathcal{L}(y, F_0(\\mathbf{x}))}{\\partial F_0(\\mathbf{x})}\n     $$\n   - Train a weak learner (e.g., decision tree) to predict residuals.\n   - Update predictions with optimal step size:\n     $$\n     F_1(\\mathbf{x}) = F_0(\\mathbf{x}) + \\rho_0 h_{\\theta_0}(\\mathbf{x})\n     $$\n\nThe process minimizes the overall loss function:\n\n$$\n\\mathcal{L} = \\sum_{i=1}^n \\mathcal{L}(y_i, F_k)\n$$\n\n## XGBoost\n\nXGBoost enhances GBDT by incorporating second-order derivatives (Hessian) and regularization terms.\n\n### Regularization\n\nIntroduces regularization to control model complexity:\n\n$$\n\\mathcal{L}^{(t)} = \\sum_{i=1}^n l(y_i, \\hat{y}_i^{(t-1)} + f_k(\\mathbf{x}_i)) + \\Omega(f_t)\n$$\n\n$$\n\\Omega(f_t) = \\gamma T + \\frac{1}{2} \\lambda \\sum_{j=1}^T w_j^2\n$$\n\nWhere:\n\n- \\( T \\): Number of leaves\n- \\( w_j \\): Leaf weight\n- \\( \\gamma, \\lambda \\): Hyperparameters\n\n### Taylor Approximation\n\nUses second-order Taylor expansion to approximate the loss function:\n\n$$\n\\mathcal{L}^{(t)} \\approx \\sum_{i=1}^n \\left[ g_i f_t(\\mathbf{x}_i) + \\frac{1}{2} h_i f_t^2(\\mathbf{x}_i) \\right] + \\Omega(f_t)\n$$\n\nWhere:\n\n- \\( g_i = \\frac{\\partial l(y_i, \\hat{y}^{(t-1)})}{\\partial \\hat{y}^{(t-1)}} \\) (gradient)\n- \\( h_i = \\frac{\\partial^2 l(y_i, \\hat{y}^{(t-1)})}{\\partial \\hat{y}^{(t-1)^2}} \\) (Hessian)\n\n### Optimal Solution\n\nOptimal weight for a leaf:\n\n$$\nw_j^* = -\\frac{\\sum_{i \\in I_j} g_i}{\\sum_{i \\in I_j} h_i + \\lambda}\n$$\n\nOptimal loss:\n\n$$\n\\mathcal{L}^{(t)}(w_j^*) = -\\frac{1}{2} \\sum_{j=1}^T \\frac{\\left(\\sum_{i \\in I_j} g_i\\right)^2}{\\sum_{i \\in I_j} (h_i + \\lambda)} + \\gamma T\n$$\n\n### Tree Construction\n\nLeaf gain is calculated as:\n\n$$\n\\text{Gain} = \\frac{G_L^2}{H_L + \\lambda} + \\frac{G_R^2}{H_R + \\lambda} - \\frac{G^2}{H + \\lambda} - \\gamma\n$$\n\n### Final Algorithm\n\n1. **Greedy Method**:\n   - Scan all split points to find the best one. High accuracy but computationally expensive.\n2. **Approximate Method**:\n   - Use candidate split points to reduce computation cost at the expense of accuracy.\n\n## Simplified XGBoost: LightGBM\n\nLightGBM is a faster, simpler alternative to XGBoost, offering high generalization performance. While not available in Exploratory, it is widely supported in Python and often serves as the default choice.\n",
    "createdAt": "2025-07-11T13:23:19.958Z",
    "updatedAt": "2025-07-11T13:23:19.958Z"
  },
  {
    "title": "Welcome!",
    "summary": "Let me introduce myself and this site!",
    "tags": [
      "profile",
      "about",
      "self"
    ],
    "slug": "index",
    "folder": ".",
    "content": "\n# Introduction\n\nHay! I'm Marte, a univ student.\n\nI study computer science, especially I'm into web development and machine learning (AI) like deep learning, generative model and so on.\n\nSo, I gonna think out loud what I am studying about!\n\n## Links\n\n- [Github](https://github.com/keu-5)\n- [Qiita](https://qiita.com/keu5)\n",
    "createdAt": "2025-07-09T03:19:32.388Z",
    "updatedAt": "2025-07-12T04:27:53.297Z"
  },
  {
    "title": "ブースのアルゴリズムをC++で実装してみた",
    "summary": "二進数の掛け算はハードウェア内でどのように行われているのかを確認しました",
    "tags": [
      "C++",
      "ブースのアルゴリズム",
      "Algorithm"
    ],
    "slug": "algorithm/booth-cpp",
    "folder": "algorithm",
    "content": "\nブースのアルゴリズム実装した記事が見つからない上にChatGPTに聞いても的外れなコードしか出来上がらないので自分で作ってみました．\n\n# ブースのアルゴリズムとは？\n\n符号付き二進数の乗算を効率的に行う手法です．加算器作ったならもちろん乗算器も作りたくなるよね？でも加算を何度もする乗算は計算に時間がかかってしまうので，ブースのアルゴリズムが編み出されました．\n\n## アルゴリズムの概要\n\nアルゴリズムは以下の通りです．\n\n1. 被乗数と乗数を二の補数表現で用意します．(今回は4bit分用意してみます)\n2. 被乗数については，符号を変えたものも用意しておきます．(もちろん補数表現を使用しますが，わかりやすいように以降は「-被乗数」とします)\n3. $A$を「被乗数 + 00000」,$S$を「-被乗数 + 00000」とします．\n4. $P_0$を「0000 + 乗数 + 0」とします．\n5. 漸化的に$P_n$を求めていきます．4bit同士の演算の場合，$P_4$まで求めます．\n   - $P_{n}$の末尾2bitが「00」あるいは「11」の場合，$P_{n}$を算術右シフトしたものを$P_n$とする\n   - 末尾が「01」の場合，$P_{n}$に$A$を加算したうえで右シフトしたものを$P_{n+1}$とする\n   - 末尾が「10」の場合，$P_{n}$に$S$を加算したうえで右シフトしたものを$P_{n+1}$とする\n6. $P_4$の上位8桁が解となります．\n\n詳しくは[シフト演算とは？論理シフトと算術シフトの違いを調べよう！](https://itmanabi.com/shift-operation/)を参考にすると良いです．\n\n# C++による実装\n\n別にCでも書けるんですけど，練習したいのでC++で書きます．\n\n## ライブラリのインポートや定数など\n\n```cpp\n#include <iostream>\n#include <vector>\n\nconstexpr int BIT_SIZE = 4;\nconstexpr int TABLE_SIZE = 2 * BIT_SIZE + 1;\n\nusing namespace std;\n```\n\n## BoothAlgorithmクラスの構築\n\n必要な変数は\n\n1. 被乗数\n1. -被乗数\n1. $P_0$\n\nで，必要な関数は，\n\n1. 整数を二進数に変換する関数\n1. 算術右シフトさせる関数\n1. 二進数加算させる関数\n1. $P_{n+1}$を求める関数\n1. 配列を表示させる関数\n1. 再帰的に$P$を求める関数\n\nです．\n\n### メンバ変数\n\nまずは必要なメンバ変数を用意します．先ほどと同様に$A$は被乗数，$S$は-被乗数，$P_0$を乗数とします．\n\n```cpp\nclass BoothAlgorithm {\n  public:\n  private:\n   vector<int> A, S, P_0, Result;\n```\n\n### 整数を二進数に変換する関数to_binary\n\n` binary[bit_size - 1 - i] = (x >> i) & 1;`とすることで，10進数の値を2進数にしたときにi桁目の値を対応する配列に格納していきます．\n\n```cpp\n    vector<int> to_binary(int x, int bit_size) {\n      vector<int> binary(bit_size, 0);\n\n      for (int i = 0; i < bit_size; i++) {\n          binary[bit_size - 1 - i] = (x >> i) & 1;\n      }\n\n      return binary;\n    }\n```\n\n### 算術シフトさせる関数right_shift\n\n算術シフトですので最上位ビットの処理に気をつけます．\n\n```cpp\n    void right_shift(vector<int>& vec) {\n      for (int i = vec.size() - 1; i > 0; --i) {\n        vec[i] = vec[i - 1];\n      }\n      vec[0] = vec[0] == 1 ? 1 : 0;\n    }\n```\n\n### 二進数加算させる関数add_vectors\n\n単純に要素ごとに加算させると，10進数として計算してしまうため，二進数としての繰り上がりを考慮する必要があります．\n\n```cpp\n    vector<int> add_vectors(const vector<int>& vec1, const vector<int>& vec2) {\n      vector<int> result(vec1.size());\n      int carry = 0;\n\n      for (size_t i = vec1.size(); i-- > 0;) {\n        int sum = vec1[i] + vec2[i] + carry;\n        result[i] = sum % 2;\n        carry = sum / 2;\n      }\n\n      return result;\n    }\n```\n\n### $P_{n+1}$を求める関数conditional_shift\n\n- $P_{n}$の末尾2bitが「00」あるいは「11」の場合，$P_{n}$を算術右シフトしたものを$P_n$とする\n- 末尾が「01」の場合，$P_{n}$に$A$を加算したうえで右シフトしたものを$P_{n+1}$とする\n- 末尾が「10」の場合，$P_{n}$に$S$を加算したうえで右シフトしたものを$P_{n+1}$とする\n\nという条件をもとにシフトさせる関数を作ります．\n\n```cpp\n    vector<int> conditional_shift(const vector<int>& A, const vector<int>& S, const vector<int>& P) {\n      vector<int> result = P;\n\n      if (P[TABLE_SIZE - 2] == P[TABLE_SIZE - 1]) {\n        right_shift(result);\n      } else if (P[TABLE_SIZE - 2] == 0) {\n        result = add_vectors(result, A);\n\n        right_shift(result);\n      } else {\n        result = add_vectors(result, S);\n\n        right_shift(result);\n      }\n\n      return result;\n    }\n```\n\n### 配列を表示させる関数\n\nあるとわかりやすいね\n\n```cpp\n    void print_array(const vector<int>& arr) {\n      for (int i = 0; i < arr.size(); i++) {\n        cout << arr[i] << \" \";\n      }\n      cout << endl;\n    }\n```\n\n### 再帰的に$P$を求める関数\n\n先ほど作った`conditional_shift()`を使って$P_1\\sim P_4$まで再帰的に計算させます．\n\n```cpp\n    vector<int> booth_algorithm(vector<int>& A, vector<int>& S, vector<int>& P, int count = BIT_SIZE) {\n      if (count > 0) {\n        P = conditional_shift(A, S, P);\n\n        cout << \"P_\" << BIT_SIZE - count + 1 << \": \";\n        print_array(P);\n\n        return booth_algorithm(A, S, P, count - 1);\n      } else {\n        vector<int> Result(TABLE_SIZE - 1, 0);\n\n        for (int i = 0; i < TABLE_SIZE - 1; i++) {\n          Result[i] = P[i];\n        }\n\n        return Result;\n      }\n    }\n```\n\n### コンストラクタなど\n\nコンストラクタでは，整数x, yを受け取り，2進数に変換しつつ適切な形式に変換して，各メンバ変数に代入していきます．また実行のために関数runを用意します．\n\n```cpp\n  public:\n    BoothAlgorithm(int x, int y) {\n      A.resize(TABLE_SIZE, 0);\n      S.resize(TABLE_SIZE, 0);\n      P_0.resize(TABLE_SIZE, 0);\n      Result.resize(TABLE_SIZE - 1, 0);\n\n      vector<int> binary_x = to_binary(x, BIT_SIZE);\n      vector<int> binary_minus_x = to_binary(-x, BIT_SIZE);\n      vector<int> binary_y = to_binary(y, BIT_SIZE);\n\n      for (int i = 0; i < BIT_SIZE; i++) {\n        A[i] = binary_x[i];\n        S[i] = binary_minus_x[i];\n        P_0[i + BIT_SIZE] = binary_y[i];\n      }\n    }\n\n    void run() {\n      cout << \"P_0: \";\n      print_array(P_0);\n\n      Result = booth_algorithm(A, S, P_0);\n\n      cout << \"Result: \";\n      print_array(Result);\n    }\n```\n\n## main関数\n\nあとはmain関数を書けば完成です．\n\n```cpp\nint main() {\n  int x, y;\n  cin >> x >> y;\n\n  BoothAlgorithm booth(x, y);\n  booth.run();\n\n  return 0;\n}\n```\n\n# 実際に実行してみる\n\n```zsh\n❯ cpp booth.cpp\n-6 5\nP_0: 0 0 0 0 0 1 0 1 0\nP_1: 0 0 1 1 0 0 1 0 1\nP_2: 1 1 1 0 1 0 0 1 0\nP_3: 0 0 1 0 0 1 0 0 1\nP_4: 1 1 1 0 0 0 1 0 0\nResult: 1 1 1 0 0 0 1 0\n\n❯ cpp booth.cpp\n5 -6\nP_0: 0 0 0 0 1 0 1 0 0\nP_1: 0 0 0 0 0 1 0 1 0\nP_2: 1 1 0 1 1 0 1 0 1\nP_3: 0 0 0 1 0 1 0 1 0\nP_4: 1 1 1 0 0 0 1 0 1\nResult: 1 1 1 0 0 0 1 0\n\n❯ cpp booth.cpp\n4 -3\nP_0: 0 0 0 0 1 1 0 1 0\nP_1: 1 1 1 0 0 1 1 0 1\nP_2: 0 0 0 1 0 0 1 1 0\nP_3: 1 1 1 0 1 0 0 1 1\nP_4: 1 1 1 1 0 1 0 0 1\nResult: 1 1 1 1 0 1 0 0\n```\n\n実際に実行してみると上記のようになります．例えば，$5\\times -6$という演算をブースのアルゴリズムで解いた場合，$P_4=(11100010)_2=(-30)_{10}$のように，確かに正しく計算できています．\n\nまた，$-6\\times 5$でも同じような結果となっており，乗法の交換律も成り立っています．\n\n$4\\times -3$も同様に正しく計算できています．\n\n# コードの全体像\n\n最後にコードの全体像を貼っておきます．\n\n```cpp\n#include <iostream>\n#include <vector>\n\nconstexpr int BIT_SIZE = 4;\nconstexpr int TABLE_SIZE = 2 * BIT_SIZE + 1;\n\nusing namespace std;\n\nclass BoothAlgorithm {\n  public:\n    BoothAlgorithm(int x, int y) {\n      A.resize(TABLE_SIZE, 0);\n      S.resize(TABLE_SIZE, 0);\n      P_0.resize(TABLE_SIZE, 0);\n      Result.resize(TABLE_SIZE - 1, 0);\n\n      vector<int> binary_x = to_binary(x, BIT_SIZE);\n      vector<int> binary_minus_x = to_binary(-x, BIT_SIZE);\n      vector<int> binary_y = to_binary(y, BIT_SIZE);\n\n      for (int i = 0; i < BIT_SIZE; i++) {\n        A[i] = binary_x[i];\n        S[i] = binary_minus_x[i];\n        P_0[i + BIT_SIZE] = binary_y[i];\n      }\n    }\n\n    void run() {\n      cout << \"P_0: \";\n      print_array(P_0);\n\n      Result = booth_algorithm(A, S, P_0);\n\n      cout << \"Result: \";\n      print_array(Result);\n    }\n\n  private:\n    vector<int> A, S, P_0, Result;\n\n    void right_shift(vector<int>& vec) {\n      for (int i = vec.size() - 1; i > 0; --i) {\n        vec[i] = vec[i - 1];\n      }\n      vec[0] = vec[0] == 1 ? 1 : 0;\n    }\n\n    vector<int> add_vectors(const vector<int>& vec1, const vector<int>& vec2) {\n      vector<int> result(vec1.size());\n      int carry = 0;\n\n      for (size_t i = vec1.size(); i-- > 0;) {\n        int sum = vec1[i] + vec2[i] + carry;\n        result[i] = sum % 2;\n        carry = sum / 2;\n      }\n\n      return result;\n    }\n\n    vector<int> to_binary(int x, int bit_size) {\n      vector<int> binary(bit_size, 0);\n\n      for (int i = 0; i < bit_size; i++) {\n          binary[bit_size - 1 - i] = (x >> i) & 1;\n      }\n\n      return binary;\n    }\n\n    vector<int> conditional_shift(const vector<int>& A, const vector<int>& S, const vector<int>& P) {\n      vector<int> result = P;\n\n      if (P[TABLE_SIZE - 2] == P[TABLE_SIZE - 1]) {\n        right_shift(result);\n      } else if (P[TABLE_SIZE - 2] == 0) {\n        result = add_vectors(result, A);\n\n        right_shift(result);\n      } else {\n        result = add_vectors(result, S);\n\n        right_shift(result);\n      }\n\n      return result;\n    }\n\n    void print_array(const vector<int>& arr) {\n      for (int i = 0; i < arr.size(); i++) {\n        cout << arr[i] << \" \";\n      }\n      cout << endl;\n    }\n\n    vector<int> booth_algorithm(vector<int>& A, vector<int>& S, vector<int>& P, int count = BIT_SIZE) {\n      if (count > 0) {\n        P = conditional_shift(A, S, P);\n\n        cout << \"P_\" << BIT_SIZE - count + 1 << \": \";\n        print_array(P);\n\n        return booth_algorithm(A, S, P, count - 1);\n      } else {\n        vector<int> Result(TABLE_SIZE - 1, 0);\n\n        for (int i = 0; i < TABLE_SIZE - 1; i++) {\n          Result[i] = P[i];\n        }\n\n        return Result;\n      }\n    }\n};\n\nint main() {\n  int x, y;\n  cin >> x >> y;\n\n  BoothAlgorithm booth(x, y);\n  booth.run();\n\n  return 0;\n}\n```\n",
    "createdAt": "2025-07-11T15:08:41.126Z",
    "updatedAt": "2025-07-11T15:09:44.636Z"
  }
]