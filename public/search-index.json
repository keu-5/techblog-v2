[
  {
    "title": "Consideration of a Generative Method Using a Gaussian Mixture Model",
    "summary": "We constructed a basic generative model using a Gaussian Mixture Model (GMM).",
    "tags": [
      "python",
      "Machine Learning",
      "Data Science",
      "Mathematical Optimization"
    ],
    "slug": "Generative-AI/GMM-gen-ai",
    "folder": "Generative-AI",
    "content": "\n# Gaussian Mixture Model (GMM)\n\n- A clustering method.\n- Can also be used as a generative model.\n- Represents a given dataset as a combination of multiple Gaussian distributions.\n- Provides a probability density function, which explains its use as a generative model.\n- Can automatically determine the number of clusters.\n- Reveals the prior distribution of explanatory variable X (latent variable).\n\n## Gaussian Distribution (can be visualized as a graph in a two-dimensional space of x and y)\n\n$$\nN(x|\\mu,\\sigma^2)=\\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\left\\{-\\frac{1}{2\\sigma^2}(x-\\mu)^2\\right\\}\n$$\n\n## Multivariate Normal Distribution (Can be viewed as a graph in three or more dimensions such as x, y, z...)\n\n$$\nN(\\mathbf x|\\mathbf\\mu,\\Sigma)=\\frac{1}{(2\\pi)^\\frac{m}{2}}\\frac{1}{|\\Sigma|^{\\frac{1}{2}}}\\exp\\left\\{-\\frac{1}{2}(\\mathbf x-\\mathbf\\mu)^T\\Sigma^{-1}(\\mathbf x-\\mathbf\\mu)\\right\\}\\quad\\left(\\mathbf x:\nRandom~variable~vector,\\mathbf\\mu:Average~vector,\\Sigma:Covariance~matrix\\right)\n$$\n\n## Mixture of Gaussian Distribution (Multiple peaks are formed)\n\n$$\np(\\mathbf x)=\\sum_{k=1}^n\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)\\quad\\left(n:n ~Gaussian~distributions,k:k-th~Gaussian~distribution,\\pi_k:Mixture~coefficient\\left(Weight~of~each~Gaussian~distribution,\\sum_{k=1}^n\\pi_k=1\\right)\\right)\n$$\n\nReference: https://datachemeng.com/wp-content/uploads/gaussianmixturemodel.pdf\n\n# Prior distribution of Mixture Gaussian Distribution\n\nThe prior distribution here is the distribution of \"which cluster a variable belongs to after receiving it.\" If we define the latent variable as $\\mathbf z$, then $\\mathbf z$ is\n\n- A vector (i.e., a matrix) with a one-hot vector that is 1 in one cluster and 0 in the others.\n- If there is no information about the sample, the probability that $\\mathbf z_k=1$ is set to follow the mixture coefficient.\n  $$\n  p(\\mathbf z_k=1)=\\pi_k\n  $$\n\nIf this is not introduced, the area will not be 1 in the mixture Gaussian distribution (it is obvious that the sum of probabilities will exceed 1 if simply added).\n\n## Finding the prior distribution\n\nUsing Bayes' theorem, the probability that a sample $\\mathbf x$ will be $z_k=1$ given is\n\n$$\np(z_k=1|\\mathbf x)=\\frac{p(z_k=1)p(\\mathbf x|z_k=1)}{\\sum_{i=1}^np(z_k=1)p(\\mathbf x|z_i=1)}=\\frac{\\pi_kp(\\mathbf x|z_k=1)}{\\sum_{i=1}^n\\pi_ip(\\mathbf x|z_i=1)}=\\frac{\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)}{\\sum_{i=1}^n\\pi_iN(\\mathbf x|\\mu_i,\\Sigma_i)}\n$$\n\nFrom this,\n\n$$\nk^\\star=\\arg\\max_kp(z_k=1|\\mathbf x)\n$$\n\nBy doing so, the cluster at a certain point $\\mathbf x$ can be estimated.\n\n# Creating a Mixture Gaussian Distribution\n\n## Definition of probability density function\n\n```py\n# Multivariate normal distribution\ndef gaussian_densty(x, mu, sigma): # (1, n), (1, n), (n, n)\n  diff = x - mu\n  sigma_inv = np.linalg.inv(sigma)\n  sigma_det = np.linalg.det(sigma)\n  z = np.exp(-np.dot(diff.T, np.dot(sigma_inv, diff)) / 2)\n\n  return z / np.sqrt(np.power(2*np.pi, len(mu)) * sigma_det) # (1, n)\n\n# Mixture Gaussian distribution\ndef mixture_gaussian_densty(x, mu_list, sigma_list, pi_list): # (1, n), (k, n), (k, n, n), (1, k)\n  z = 0\n  for i in range(len(pi_list)):\n    z += pi_list[i] * gaussian_densty(x, mu_list[i], sigma_list[i])\n  return z # (1, n)\n```\n\n> Note that only the probability density function has been created, so the corresponding code is required to sample it.\n\n## Using NumPy's Official Multivariate Normal Distribution\n\n```py\n# Generate samples from a multivariate normal distribution\ndef sample_multivariate_gaussian(mu, sigma, num_samples=1):\n    return np.random.multivariate_normal(mu, sigma, num_samples)\n\n# Generate samples from a mixture Gaussian distribution\ndef sample_mixture_gaussian(mu_list, sigma_list, pi_list, num_samples=100):\n    samples = []\n    num_clusters = len(pi_list)\n\n    # Determine the number of samples in each cluster\n    cluster_sizes = np.random.multinomial(num_samples, pi_list) # Randomly determine the number of samples in each cluster using the mixture coefficients\n\n    for i in range(num_clusters):\n        # Generate samples for each cluster\n        cluster_samples = sample_multivariate_gaussian(mu_list[i], sigma_list[i], cluster_sizes[i])\n        samples.append(cluster_samples)\n\n    # Combine the samples and return them\n    return np.vstack(samples)\n```\n\n## Preparing the data\n\n```py\n# Prepare sample data\n# Create a Gaussian mixture distribution with random variable X = [x0, x1], Mu = [mu0, mu1], and latent variable Z = [z0, z1, z2].\n\n# Cluster 0\nmu0 = np.array([0, -0.5])\nsigma0 = np.array([[1.0, 0], [0, 1.0]])\n# Cluster 1\nmu1 = np.array([2.5, 2])\nsigma1 = np.array([[0.5, 0.3], [0.3, 0.7]])\n\n# Cluster 2\nmu2 = np.array([-2, 1.5])\nsigma2 = np.array([[1.2, 0.2], [0.2, 0.4]])\n\n# Combine data\nmu_list = [mu0, mu1, mu2]\nsigma_list = [sigma0, sigma1, sigma2]\npi_list = [0.45, 0.25, 0.3]\n\n# Number of sample data points\nNUM_DATA = 500\n\n# Generate samples from the Gaussian mixture distribution\nsamples = sample_mixture_gaussian(mu_list, sigma_list, pi_list, num_samples=NUM_DATA)\n\nsamples[:10]\n```\n\n## Plotting the Gaussian Mixture Distribution\n\n```py\ndef plot_mixture_gaussian(mu_list, sigma_list, pi_list, samples=None, figsize=(8,6)):\n    x_range = np.linspace(-5, 5, 100)\n    y_range = np.linspace(-5, 5, 100)\n    X, Y = np.meshgrid(x_range, y_range)\n    Z = np.zeros((len(x_range), len(y_range)))\n\n    # Calculate the probability density for each coordinate\n    for i in range(len(x_range)):\n        for j in range(len(y_range)):\n            x = np.array([x_range[i], y_range[j]])\n            Z[i, j] = mixture_gaussian_densty(x, mu_list, sigma_list, pi_list)\n\n    plt.figure(figsize=figsize)\n    if samples is not None:\n        plt.scatter(samples[:, 1], samples[:, 0], color='red', s=10, label='Samples')\n    plt.contour(X, Y, Z, cmap='viridis')\n    plt.colorbar(label='Density')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.title('Mixture Gaussian Distribution')\n    plt.show()\n\nplot_mixture_gaussian(mu_list, sigma_list, pi_list, samples)\n```\n\n# Estimating Clusters from Samples\n\n`To be considered later`\n\n# Estimating Parameters of the Mixture Gaussian Distribution from Samples\n\n## Maximum Likelihood Estimation\n\n\"Likelihood maximization\" is one of the methods to estimate the distribution from the sample data.\n\n$$\nLikelihood~function:{\\cal L}(\\theta;\\mathbf x)=\\prod_{i=1}^nP(x_i;\\theta),\\quad Maximum~likelihood~estimator:\\theta^\\star=\\arg\\max_\\theta{\\cal L}(\\theta;\\mathbf x)\\quad(n:Number~of~samples)\n$$\n\nReference: https://cochineal19.hatenablog.com/entry/2021/11/08/003751\n\n## Define the log likelihood function\n\nIt's hard to calculate the likelihood function directly because it's a product of many probabilities. Therefore, it is common to use the log likelihood function.\n\nThere is no effect on the maximum value of the function because the logarithm is a monotonically increasing function.\n\n$$\n{\\cal L}(\\mu,\\Sigma,\\pi;\\mathbf x)=\\prod_{i=1}^np(\\mathbf x;\\mu,\\Sigma,\\pi)=\\prod_{i=1}^n\\sum_{k=1}^n\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)\\\\\\to\\log{\\cal L}(\\mu,\\Sigma,\\pi;\\mathbf x)=\\log\\prod_{i=1}^n\\sum_{k=1}^n\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)=\\sum_{i=1}^n\\log\\sum_{k=1}^n\\pi_kN(\\mathbf x|\\mu_k,\\Sigma_k)\n$$\n\n```py\ndef log_likelihood(mu_list, sigma_list, pi_list, sample):\n  log_likelihood = 0\n  for i in range(len(sample)):\n    log_likelihood += np.log(mixture_gaussian_densty(sample[i], mu_list, sigma_list, pi_list))\n\n  return log_likelihood\n```\n\n## Defining the Burden Rate\n\nSince we need to find the prior distribution \\( p(z|x) \\) of \\( p(x|z) \\), the prior probability of each cluster for a given data point \\( \\mathbf{x_i} \\) is expressed as follows:\n\n$$\np_{\\mu,\\Sigma,\\pi}(z_{ik}=1|\\mathbf{x_i}) = \\frac{\\pi_k{\\cal N}(\\mathbf{x_i};\\mu_k,\\Sigma_k)}{\\sum_{j=1}^K \\pi_j {\\cal N}(\\mathbf{x_i};\\mu_j,\\Sigma_j)} \\equiv \\gamma(z_{ik})\n$$\n\nIntuitively, we are calculating the probability that the distribution of each cluster fits the given data point.\n\n```py\ndef responsibility(data, mu_list, sigma_list, pi_list):\n    gamma = np.zeros((len(data), len(pi_list)))\n    for i in range(len(data)):\n        for j in range(len(pi_list)):\n            gamma[i, j] = pi_list[j] * gaussian_density(data[i], mu_list[j], sigma_list[j])\n        gamma[i] /= np.sum(gamma[i])\n    return gamma\n```\n\n### Classifying Using the Burden Rate\n\nTo perform classification, we need to find:\n\n$$\nz^\\star = \\argmax_{z_{ik}} \\gamma(z_{ik})\n$$\n\nThis gives us the cluster with the highest responsibility for each data point.\n\n```python\ndf = pd.DataFrame(samples[:, [1, 0]], columns=['x', 'y'])\ngamma = responsibility(samples, mu_list, sigma_list, pi_list)\ndf['gamma0'] = gamma[:, 0]\ndf['gamma1'] = gamma[:, 1]\ndf['gamma2'] = gamma[:, 2]\ndf['z_star'] = df[['gamma0', 'gamma1', 'gamma2']].idxmax(axis=1)\n\nx_range = np.linspace(-5, 5, 100)\ny_range = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x_range, y_range)\nZ = np.zeros((len(x_range), len(y_range)))\n\n# Calculate probability density for each coordinate\nfor i in range(len(x_range)):\n    for j in range(len(y_range)):\n        x = np.array([x_range[i], y_range[j]])\n        Z[i, j] = mixture_gaussian_density(x, mu_list, sigma_list, pi_list)\n\nsns.scatterplot(x='x', y='y', hue='z_star', data=df, palette='viridis')\nplt.contour(X, Y, Z, cmap='viridis')\nplt.colorbar(label='Density')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Mixture Gaussian Distribution')\nplt.show()\n```\n\n## Learning\n\nTo maximize the log-likelihood, we need to solve:\n\n$$\n\\argmax_{\\mu,\\Sigma,\\pi} \\log {\\cal L}(\\mu, \\Sigma, \\pi; \\mathbf{x}) = \\argmax_{\\mu,\\Sigma,\\pi} \\sum_{i=1}^n \\log \\sum_{k=1}^K \\pi_k N(\\mathbf{x} | \\mu_k, \\Sigma_k)\n$$\n\nIn this case, the log-sum part makes it difficult to solve analytically → We optimize it using the Expectation-Maximization (EM) algorithm.\n\n### Initialize the parameters\n\nSet randomly\n\n### E-Step\n\nCalculate the responsibility for each data point at the current step:\n\n$$\np_{\\mu,\\Sigma,\\pi}(z_{ik}=1|\\mathbf x_i)=\\frac{\\pi_k{\\cal N}(\\mathbf x_i;\\mu_k,\\Sigma_k)}{\\sum_{j=1}^K\\pi_j{\\cal N}(\\mathbf x_i;\\mu_j,\\Sigma_j)}\\equiv\\gamma(z_{ik})\n$$\n\n### M-Step\n\nUpdate the parameters to maximize the likelihood using the responsibilities:\n\n$$\n\\begin{aligned}\n&\\frac{\\partial{\\cal L}}{\\partial\\mu_k}=0\\to\\mu_k=\\frac{1}{N_k}\\sum_{i=1}^n\\gamma(z_{ik})\\mathbf x_i\\\\\n&\\frac{\\partial{\\cal L}}{\\partial\\Sigma_k}=0\\to\\Sigma_k=\\frac{1}{N_k}\\sum_{i=1}^n\\gamma(z_{ik})(\\mathbf x_i-\\mu_k)(\\mathbf x_i-\\mu_k)^T\n\\end{aligned}\n\\quad\\left(N_k=\\sum_{i=1}^n\\gamma(z_{ik})\\right)\n$$\n\nFor $\\pi_k$, since $\\sum_{k=1}^K\\pi_k=1$, we use the Lagrange multiplier method to maximize the likelihood:\n\n$$\n\\frac{\\partial G}{\\partial\\pi_k}=0\\to\\pi_k=\\frac{N_k}{\\sum_{k=1}^KN_k}\\quad\\left(G={\\cal L}+\\lambda\\left(\\sum_{k=1}^K\\pi_k-1\\right)\\right)\n$$\n\n### Convergence Condition\n\nIf the change in the likelihood meets a predefined threshold $\\epsilon$:\n\n$$\n{\\cal L}_{new}-{\\cal L}_{old}<\\epsilon\n$$\n\nthen stop the iterations; otherwise, repeat the EM steps.\n\n```python\n# Number of clusters (You can use methods to find the optimal number)\nK = 3\n\n# Initialize random mean vectors (2D)\nmu_list = [np.random.randn(2) for _ in range(K)]\n\n# Initialize random covariance matrices (2x2)\nsigma_list = []\nfor _ in range(K):\n    A = np.random.randn(2, 2)\n    sigma = np.dot(A, A.T)  # Create symmetric and positive definite matrices\n    sigma_list.append(sigma)\n\n# Initialize random mixing coefficients and normalize\npi_list = np.random.rand(K)\npi_list = pi_list / np.sum(pi_list)\n\n# Display the results\nprint(\"mu_list:\", mu_list)\nprint(\"sigma_list:\", sigma_list)\nprint(\"pi_list:\", pi_list)\n\nn_iter = 0\n\nlikely = log_likelihood(mu_list, sigma_list, pi_list, samples) / NUM_DATA\nprint('Iteration: {0}, log_likelihood: {1}'.format(n_iter, likely))\nplot_mixture_gaussian(mu_list, sigma_list, pi_list, samples, figsize=(4,3))\n\nth = 0.0001\n\nwhile True:\n  n_iter += 1\n\n  # E-Step\n  gamma = responsibility(samples, mu_list, sigma_list, pi_list)\n  n_k = np.sum(gamma, axis=0)\n\n  # M-Step\n\n  # Update pi\n  pi_list_next = (n_k / n_k.sum()).tolist()\n\n  # Update mu\n  mu_list_next = list(((samples.T @ gamma) / n_k).T)\n\n  # Update Sigma\n  sigma_list_next = []\n  for k in range(len(pi_list)):\n    sigma_k = np.zeros_like(sigma_list[k], dtype=float)\n    for i in range(len(samples)):\n      sigma_k += gamma[i, k] * np.matmul(\n          (samples[i] - mu_list[k]).reshape(-1, 1),\n          (samples[i] - mu_list[k]).reshape(1, -1)\n      )\n\n    sigma_list_next.append(sigma_k/n_k[k])\n\n  # Why deepcopy here? (Possibly due to reference issues)\n  # Also, why is 'next' converted to regular lists for all?\n  mu_list = copy.deepcopy(mu_list_next)\n  sigma_list = copy.deepcopy(sigma_list_next)\n  pi_list = copy.deepcopy(pi_list_next)\n\n  # Convergence condition\n  likely_before = likely\n  likely = log_likelihood(mu_list, sigma_list, pi_list, samples) / NUM_DATA\n  print('Iteration: {0}, log_likelihood: {1}'.format(n_iter, likely))\n  plot_mixture_gaussian(mu_list, sigma_list, pi_list, samples, figsize=(4,3))\n\n  delta = likely - likely_before\n  if delta < th:\n    break\n\n# Display results\nprint(\"mu_list:\", mu_list)\nprint(\"sigma_list:\", sigma_list)\nprint(\"pi_list:\", pi_list)\n```\n",
    "updatedAt": "2025-06-07T06:19:30.634Z"
  },
  {
    "title": "Next.jsとRailsで作るwebアプリ",
    "summary": "Next.jsとRailsでapi開発の勉強をしたのでここにメモしておきます",
    "tags": [
      "Next.js",
      "webアプリ開発",
      "Ruby on Rails",
      "API"
    ],
    "slug": "Next.js/next-rails-tutorial",
    "folder": "Next.js",
    "content": "\n# バックエンド\n\n## railsプロジェクト作成\n\n---\n\n```bash\nrails new blog_api --api -T\n```\n\n`--api`とすることで，viewなどの余計なファイルの作成がされなくなります．また，`-T`とすると，テスト用のファイルが生成されなくなります．\n\n## gemの追加\n\n---\n\n```ruby\n# Gemfile\n  gem 'rack-cors', require: 'rack/cors'\n```\n\nNext.jsアプリのリクエストを受け付ける際にcorsの設定をする必要があるので，`rack-cors`のgemを追加します．その後，`bundle install`することを忘れないようにしましょう\n\n## rack-corsの設定\n\n---\n\nここで許可するオリジンを設定しておきましょう\n\n```ruby\n# config/initializers/cors.rb\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins \"http://localhost:3000\"\n\n    resource \"*\",\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head]\n  end\nend\n```\n\n## モデル作成\n\n---\n\nデータベースに登録したいテーブルのモデルを作ります．\n\n```bash\nrails generate model Post title:string content:text\n```\n\nこの場合，dbには`posts`というテーブルが追加されることになります．\n\n### 作成されるファイル\n\n#### **マイグレーションファイル**\n\nデータベースのテーブルを作成するためのファイル．`rails db:migrate`をするとはじめて実行される\n\n```ruby\n# db/migrate/20250209064827_create_posts.rb\nclass CreatePosts < ActiveRecord::Migration[7.2]\n  def change\n    create_table :posts do |t|\n      t.string :title\n      t.text :content\n\n      t.timestamps\n    end\n  end\nend\n```\n\n> モデルは単数形で一文字目が大文字，テーブルは複数形で全て小文字で記述するのが慣習\n\n#### **モデルファイル**\n\nここに記述されたクラスを用いて，コントローラなどでデータベースの操作を行う．バリデーションやアソシエーションなどを記述することも可能\n\n```ruby\n# app/models/post.rb\nclass Post < ApplicationRecord\nend\n```\n\n#### **テストファイル**\n\n今回は`rails new blog_api --api -T`で`-T`オプションを指定しているため，テストファイルは作成されない\n\n#### **シードファイル**\n\nなにも書かれていないが，特にシードデータを追加する必要があれば，`Post.create`を使って初期データを登録することも可能\n\n## マイグレーション\n\n---\n\n```bash\nrails db:migrate\n```\n\n> `db/schema.rb`にデータベースのスキーマが記述される\n\n## コントローラ作成\n\n---\n\nコントローラは，ユーザからのリクエストを受け取り，適切な処理を行い，レスポンスを返す役割を持ちます．それぞれのコントローラはルーティングを設定することによりリクエストが可能になります．\n\n> **MVCモデルとは**\\\n> ソフトウェアアーキテクチャの一つ．アプリケーションの構造をmodel, view, controllerの3つに分けることで，コードの整理や保守性を向上させることができる．\n\n### コントローラ作成\n\n```bash\nrails generate controller Api::v1::Posts index show create update destroy\n```\n\n> コントローラの設定を間違えた場合，`rails destroy controller Api::v1::Posts`で削除できる\n\n#### **作成されるファイル**\n\n##### **コントローラファイル**\n\nコントローラの処理を記述するファイル．`render`メソッドでレスポンスを返す．以下のように記述することで，json形式でデータを返すことができます．\n\n今回は，**投稿一覧**，**特定の投稿**が取得できるコントローラ，投稿内容を**作成**，**編集**，**削除**できるコントローラを作っていきます\n\n```ruby\n# app/controllers/api/v1/posts_controller.rb\nclass Api::V1::PostsController < ApplicationController\n  def index\n    @posts = Post.all\n\n    render json: @posts\n  end\n\n  def show\n    @post = Post.find(params[:id])\n\n    render json: @post\n  end\n\n  def create\n    @post = Post.new(post_params)\n\n    if @post.save\n      render json: @post, status: :created\n    else\n      render json: @post.errors, status: :unprocessable_entity\n    end\n  end\n\n  def update\n    @post = Post.find(params[:id])\n\n    if @post.update(post_params)\n      render json: @post\n    else\n      render json: @post.errors, status: :unprocessable_entity\n    end\n  end\n\n  def destroy\n    @post = Post.find(params[:id])\n\n    @post.destroy\n  end\n\n  private\n\n  def post_params\n    params.require(:post).permit(:title, :content)\n  end\nend\n```\n\n> `@`がついている変数はインスタンス変数．`:`がついている変数はシンボル．文字列の皮をかぶった整数値 \\\n> `status: :unprocessable_entity`は辞書 \\\n> `params` は Rails がリクエストのデータを自動でセットしてくれるオブジェクト\n\n##### **ルーティング**\n\n基本は既に設定されている．`config/routes.rb`で管理をしている\n\n```ruby\n# config/routes.rb\n\nRails.application.routes.draw do\n  namespace :api do\n    namespace :v1 do\n      resources :posts, only: [:index, :show, :create, :update, :destroy]\n    end\n  end\n  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html\n\n  # Reveal health status on /up that returns 200 if the app boots with no exceptions, otherwise 500.\n  # Can be used by load balancers and uptime monitors to verify that the app is live.\n  get \"up\" => \"rails/health#show\", as: :rails_health_check\n\n  # Defines the root path route (\"/\")\n  # root \"posts#index\"\nend\n```\n\n> `resources :posts, only: [:index, :show, :create, :update, :destroy]` とすると，これらは暗黙的に以下のルーティングが設定される\n> | HTTPメソッド | パス | コントローラ#アクション | 用途 |\n> | --- | --- | --- | --- |\n> | GET | /posts | posts#index | 一覧表示 |\n> | GET | /posts/:id | posts#show | 詳細表示 |\n> | POST | /posts | posts#create | 作成 |\n> | PUT | /posts/:id | posts#update | 更新 |\n> | DELETE | /posts/:id | posts#destroy | 削除 |\n>\n> これを各コントローラごとに設定することでrestfulなAPIを作成することができる\n\n### テスト\n\npostmanやcurlコマンドを使ってAPIのテストを行う\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"post\": {\"title\": \"初めての投稿です\", \"content\": \"初めての投稿です\"}}' http://localhost:3000/api/v1/posts\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"post\": {\"title\": \"2つ目の投稿です\", \"content\": \"2つ目の投稿です\"}}' http://localhost:3000/api/v1/posts\n\ncurl http://localhost:3000/api/v1/posts\ncurl http://localhost:3000/api/v1/posts/1\ncurl http://localhost:3000/api/v1/posts/2\n\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"post\": {\"title\": \"初めての投稿を更新しました\", \"content\": \"初めての投稿を更新しました\"}}' http://localhost:3000/api/v1/posts/1\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"post\": {\"title\": \"2つ目の投稿を更新しました\", \"content\": \"2つ目の投稿を更新しました\"}}' http://localhost:3000/api/v1/posts/2\n\ncurl -X DELETE http://localhost:3000/api/v1/posts/1\ncurl -X DELETE http://localhost:3000/api/v1/posts/2\n```\n\n## ポート番号の変更\n\n```bash\nrails s -p 3001\n```\n\n> 永続的に変更する場合は`config/puma.rb`を変更する\n\n# フロントエンド\n\nNext.js typescript App router, TailwindCSSを使っていきます．\n\n## プロジェクト作成\n\n---\n\n```bash\nnpx create-next-app blog_client\n```\n\n## 各種コンポーネントの作成\n\n---\n\n### 型定義ファイル\n\nバックエンド開発時に作ったモデルのスキーマと同じにすると良いです．\n\n```typescript\nexport type Post = {\n  id: number;\n  title: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n};\n```\n\n### 投稿一覧ページ\n\n#### **一覧ページ**\n\n一覧ページでは，`http://localhost:3000/api/v1/posts`にアクセスすることで，すべての投稿を取得します．各投稿には編集ボタンと削除ボタンを用意し，投稿作成ボタンも用意します．\n\n基本的にはSSRで実装していきますが，フォームなどはクライアント側で処理しないといけないので，それらは別途クライアントコンポーネントとして作成していきます．\n\n> **SSRとは**\\\n> サーバサイドレンダリングの意．クライアント側ではなくサーバ側で処理を済ますので負荷がかかりにくくセキュリティ面においても安全．\n\n```tsx\n// app/page.tsx\nimport { Post } from \"@/lib/types\";\nimport Link from \"next/link\";\nimport { DeletePost } from \"./_components/delete-post\";\n\nexport default async function Home() {\n  const res = await fetch(\"http://localhost:3001/api/v1/posts\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const posts: Post[] = await res.json();\n\n  return (\n    <div className=\"container mx-auto p-4 flex flex-col items-center\">\n      <h2 className=\"text-2xl font-bold mb-4\">Rails & Next.js Blog</h2>\n\n      <Link\n        href=\"/create-post\"\n        className=\"text-blue-500 hover:text-blue-700 mb-4\"\n      >\n        Create new Post\n      </Link>\n\n      <div className=\"mt-6 w-full max-w-2xl\">\n        {posts.map((post) => (\n          <div\n            key={post.id}\n            className=\"border border-gray-300 rounded-lg p-4 mb-4 shadow-md\"\n          >\n            <Link\n              href={`posts/${post.id}`}\n              className=\"text-xl font-semibold text-blue-600 hover:text-blue-800\"\n            >\n              {post.title}\n            </Link>\n\n            <p className=\"text-gray-700 mt-2\">{post.content}</p>\n\n            <div className=\"flex justify-end mt-4\">\n              <Link\n                href={`posts/${post.id}/edit-post`}\n                className=\"text-sm text-white bg-blue-500 hover:bg-blue-700 py-1 px-2 rounded mr-2\"\n              >\n                Edit\n              </Link>\n\n              <DeletePost id={post.id} />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n#### **削除コンポーネント**\n\nこちらはonClickをクライアント側で発火させなければならないため，`use client`を追加し，クライアントコンポーネントにします．\n\n```tsx\n// app/_components/delete-post.tsx\n\"use client\";\n\nexport const DeletePost = ({ id }: { id: number }) => {\n  const handleDelete = async (id: number) => {\n    const res = await fetch(`http://localhost:3001/api/v1/posts/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (res.ok) {\n      alert(\"Post deleted\");\n    } else {\n      alert(\"Failed to delete post\");\n    }\n  };\n\n  return (\n    <button\n      onClick={() => handleDelete(id)}\n      className=\"text-sm text-white bg-red-500 hover:bg-red-700 py-1 px-2 rounded\"\n    >\n      Delete\n    </button>\n  );\n};\n```\n\n### 投稿詳細ページ\n\nこちらでは，動的ルーティングを用いてidを取得し，対象の投稿を取得して表示します．\n\n```tsx\n// app/posts/[id]/page.tsx\nimport { Post } from \"@/lib/types\";\nimport Link from \"next/link\";\n\nexport default async function PostPage({\n  params,\n}: {\n  params: Promise<{ id: string }>;\n}) {\n  const { id } = await params;\n  const res = await fetch(`http://localhost:3001/api/v1/posts/${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const post: Post = await res.json();\n\n  return (\n    <div className=\"container mx-auto p-4 flex flex-col items-center\">\n      <div className=\"w-full max-w-2xl p-4\">\n        <h1 className=\"text-3xl font-bold mb-4\">{post.title}</h1>\n        <div className=\"text-gray-500 mb-4\">{post.created_at}</div>\n        <p className=\"text-gray-700\">{post.content}</p>\n        <Link href=\"/\" className=\"text-blue-500 hover:text-blue-700\">\n          投稿一覧に戻る\n        </Link>\n      </div>\n    </div>\n  );\n}\n```\n\n### 投稿作成ページ\n\nこちらは，クライアント側がフォームを編集しなければならないので，クライアントコンポーネントにします．\n\n```tsx\n// app/create-post/page.tsx\n\"use client\";\n\nimport Link from \"next/link\";\nimport { redirect } from \"next/navigation\";\n\nexport default function CreatePage() {\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const formData = new FormData(e.currentTarget);\n    const title = formData.get(\"title\") as string;\n    const content = formData.get(\"content\") as string;\n\n    const res = await fetch(\"http://localhost:3001/api/v1/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        title: title,\n        content: content,\n      }),\n    });\n\n    if (res.ok) {\n      redirect(\"/\");\n    } else {\n      alert(\"Failed to create post\");\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 flex flex-col items-center\">\n      <div className=\"w-full max-w-2xl\">\n        <h1 className=\"text-3xl font-bold mb-6\">ブログ新規登録</h1>\n\n        <form className=\"w-full\" onSubmit={handleSubmit}>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n              タイトル\n            </label>\n            <input\n              name=\"title\"\n              type=\"text\"\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            />\n          </div>\n\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n              本文\n            </label>\n            <textarea\n              name=\"content\"\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              投稿\n            </button>\n            <Link href=\"/\" className=\"text-blue-500 hover:text-blue-700\">\n              キャンセル\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n```\n\n### 投稿編集ページ\n\n#### **編集ページ**\n\nこちらは，パラメータを受け取るためにSSRし，編集ができるクライアントコンポーネントを渡しておきます\n\n```tsx\nimport { Post } from \"@/lib/types\";\nimport { EditForm } from \"./_components/form\";\n\nexport default async function EditPage({\n  params,\n}: {\n  params: Promise<{ id: string }>;\n}) {\n  const { id } = await params;\n  const res = await fetch(`http://localhost:3001/api/v1/posts/${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const post: Post = await res.json();\n\n  return <EditForm post={post} />;\n}\n```\n\n#### **編集フォーム**\n\n```tsx\n\"use client\";\n\nimport { Post } from \"@/lib/types\";\nimport Link from \"next/link\";\nimport { redirect } from \"next/navigation\";\n\nexport const EditForm = ({ post }: { post: Post }) => {\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const formData = new FormData(e.currentTarget);\n    const title = formData.get(\"title\") as string;\n    const content = formData.get(\"content\") as string;\n\n    const res = await fetch(`http://localhost:3001/api/v1/posts/${post.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        title: title,\n        content: content,\n      }),\n    });\n\n    if (res.ok) {\n      redirect(`/posts/${post.id}`);\n    } else {\n      alert(\"Failed to update post\");\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 flex flex-col items-center\">\n      <div className=\"w-full max-w-2xl\">\n        <h1 className=\"text-3xl font-bold mb-6\">ブログ編集</h1>\n\n        <form className=\"w-full\" onSubmit={handleSubmit}>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n              タイトル\n            </label>\n            <input\n              name=\"title\"\n              type=\"text\"\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              defaultValue={post.title}\n            />\n          </div>\n\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n              本文\n            </label>\n            <textarea\n              name=\"content\"\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              defaultValue={post.content}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              更新\n            </button>\n            <Link\n              href={`/posts/${post.id}`}\n              className=\"text-blue-500 hover:text-blue-700\"\n            >\n              キャンセル\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n```\n",
    "updatedAt": "2025-06-07T09:40:30.575Z"
  },
  {
    "title": "Radix UIのdropdown menuを開くとscrollbarが消えてスタイルが変わるときの対処法",
    "summary": "記事がなかったので作る",
    "tags": [
      "Next.js",
      "Web",
      "Webアプリ開発",
      "shadcn/ui",
      "CSS"
    ],
    "slug": "Next.js/redix-dropdown-error",
    "folder": "Next.js",
    "content": "\nRadix UIのdropdown menuを開くときに，スクロールバーが消えてスタイルが変わってしまうことがあった．見栄えが悪いので修正しようとしたが記事がなく，修正に手間取ったのでここに修正方法を記す．\n\n該当のコードは以下の通り．\n\n```tsx\n\"use client\";\nimport { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport const ThemeToggle = ({ children }: { children: React.ReactNode }) => {\n  const { setTheme } = useTheme();\n\n  return (\n    <>\n      {children}\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"\n              fixed bottom-8 right-8 \n              dark:text-gray-800 text-gray-200\n              hover:dark:text-gray-700 hover:text-gray-200\n              dark:bg-white bg-black\n              hover:dark:bg-gray-100 hover:bg-gray-950\n              dark:border-white border-black\n            \"\n          >\n            <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n            <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            <span className=\"sr-only\">Toggle theme</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          align=\"end\"\n          className=\"\n            dark:text-gray-800 text-gray-200\n            hover:dark:text-gray-700 hover:text-gray-200\n            dark:bg-white bg-black\n            hover:dark:bg-gray-100 hover:bg-gray-950\n            border-none\n          \"\n        >\n          <DropdownMenuItem\n            className=\"dark:hover:bg-gray-300 dark:hover:text-black\"\n            onClick={() => setTheme(\"light\")}\n          >\n            Light\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            className=\"dark:hover:bg-gray-300 dark:hover:text-black\"\n            onClick={() => setTheme(\"dark\")}\n          >\n            Dark\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            className=\"dark:hover:bg-gray-300 dark:hover:text-black\"\n            onClick={() => setTheme(\"system\")}\n          >\n            System\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n};\n```\n\nボタン要素が`fixed`だからおかしくなったのかなとは思うが`fixed`は使わざるを得ない．ちなみにレスポンシブでは同様のバグは発生しなかった．もちろんスクロールバーが出ない状態でも発生はしない．\n\n修正方法は以下の通り．`grobals.css`にこれを追加するだけ．\n\n```css\nbody[data-scroll-locked][data-scroll-locked] {\n  overflow: auto !important;\n  margin-right: 0 !important;\n}\n```\n\n`data-scroll-locked`属性が2回付与された`body`要素に対して適用している．おそらくJSによってdata-scroll-lockedをbodyに付与することでスクロールを無効化しており，dropdown menuにその機能があったのではないかと推測している．\n\n`[data-scroll-locked][data-scroll-locked]`のように2回付与された場合しか適用できなかった．\n\nそしてこの時に`overflow: auto !important;`と`margin-right: 0 !important;`を指定している．\n\n前者は要素がオーバーフローをしたときにスクロールバーを表示させるようにしているが，`!important`によってそれを優先的に適用させている．\n\nこのときになぜかbodyに`margin-right: 16px !important`が付与されるため，後者のように指定することでそれを無効化している．\n\n参考\n[shadcn/radix ui scrollbar removal bug](https://www.reddit.com/r/reactjs/comments/1fjcwkh/shadcnradix_ui_scrollbar_removal_bug/?rdt=60694)\n",
    "updatedAt": "2025-06-07T09:44:05.415Z"
  },
  {
    "title": "Welcome!",
    "summary": "Let me introduce myself and this site!",
    "tags": [
      "profile",
      "about",
      "self"
    ],
    "slug": "index",
    "folder": ".",
    "content": "\n# Introduction\n\nHay! I'm Marte, a univ student.\n\nI study computer science, especially I'm into web development and machine learning (AI) like deep learning, generative model and so on.\n\nSo, I gonna think out loud what I am studying about!\n\n## Links\n\n- [Github](https://github.com/keu-5)\n- [Qiita](https://qiita.com/keu5)\n",
    "updatedAt": "2025-06-07T06:25:46.264Z"
  }
]